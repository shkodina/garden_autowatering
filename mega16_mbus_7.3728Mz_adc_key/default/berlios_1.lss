
berlios_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  000016ec  00001780  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001bd  008000a2  008000a2  000017c2  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  000017c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  00001f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00001ffb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000061a  00000000  00000000  0000219b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002625  00000000  00000000  000027b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000c4d  00000000  00000000  00004dda  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001bc1  00000000  00000000  00005a27  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000470  00000000  00000000  000075e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000e96  00000000  00000000  00007a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001b70  00000000  00000000  000088ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000004db  00000000  00000000  0000a45e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  0000a939  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 01 	jmp	0x254	; 0x254 <__ctors_end>
       4:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
       8:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
       c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      10:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      14:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      18:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__vector_6>
      1c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      20:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      24:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      28:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      2c:	0c 94 75 04 	jmp	0x8ea	; 0x8ea <__vector_11>
      30:	0c 94 4e 04 	jmp	0x89c	; 0x89c <__vector_12>
      34:	0c 94 9c 04 	jmp	0x938	; 0x938 <__vector_13>
      38:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      3c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      40:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      44:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      48:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      4c:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>
      50:	0c 94 47 01 	jmp	0x28e	; 0x28e <__bad_interrupt>

00000054 <aucCRCHi>:
      54:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
      64:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
      74:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
      84:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
      94:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
      a4:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
      b4:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
      c4:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
      d4:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
      e4:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
      f4:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
     104:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
     114:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@
     124:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
     134:	01 c0 80 41 00 c1 81 40 00 c1 81 40 01 c0 80 41     ...A...@...@...A
     144:	00 c1 81 40 01 c0 80 41 01 c0 80 41 00 c1 81 40     ...@...A...A...@

00000154 <aucCRCLo>:
     154:	00 c0 c1 01 c3 03 02 c2 c6 06 07 c7 05 c5 c4 04     ................
     164:	cc 0c 0d cd 0f cf ce 0e 0a ca cb 0b c9 09 08 c8     ................
     174:	d8 18 19 d9 1b db da 1a 1e de df 1f dd 1d 1c dc     ................
     184:	14 d4 d5 15 d7 17 16 d6 d2 12 13 d3 11 d1 d0 10     ................
     194:	f0 30 31 f1 33 f3 f2 32 36 f6 f7 37 f5 35 34 f4     .01.3..26..7.54.
     1a4:	3c fc fd 3d ff 3f 3e fe fa 3a 3b fb 39 f9 f8 38     <..=.?>..:;.9..8
     1b4:	28 e8 e9 29 eb 2b 2a ea ee 2e 2f ef 2d ed ec 2c     (..).+*.../.-..,
     1c4:	e4 24 25 e5 27 e7 e6 26 22 e2 e3 23 e1 21 20 e0     .$%.'..&"..#.! .
     1d4:	a0 60 61 a1 63 a3 a2 62 66 a6 a7 67 a5 65 64 a4     .`a.c..bf..g.ed.
     1e4:	6c ac ad 6d af 6f 6e ae aa 6a 6b ab 69 a9 a8 68     l..m.on..jk.i..h
     1f4:	78 b8 b9 79 bb 7b 7a ba be 7e 7f bf 7d bd bc 7c     x..y.{z..~..}..|
     204:	b4 74 75 b5 77 b7 b6 76 72 b2 b3 73 b1 71 70 b0     .tu.w..vr..s.qp.
     214:	50 90 91 51 93 53 52 92 96 56 57 97 55 95 94 54     P..Q.SR..VW.U..T
     224:	9c 5c 5d 9d 5f 9f 9e 5e 5a 9a 9b 5b 99 59 58 98     .\]._..^Z..[.YX.
     234:	88 48 49 89 4b 8b 8a 4a 4e 8e 8f 4f 8d 4d 4c 8c     .HI.K..JN..O.ML.
     244:	44 84 85 45 87 47 46 86 82 42 43 83 41 81 80 40     D..E.GF..BC.A..@

00000254 <__ctors_end>:
     254:	11 24       	eor	r1, r1
     256:	1f be       	out	0x3f, r1	; 63
     258:	cf e5       	ldi	r28, 0x5F	; 95
     25a:	d4 e0       	ldi	r29, 0x04	; 4
     25c:	de bf       	out	0x3e, r29	; 62
     25e:	cd bf       	out	0x3d, r28	; 61

00000260 <__do_copy_data>:
     260:	10 e0       	ldi	r17, 0x00	; 0
     262:	a0 e6       	ldi	r26, 0x60	; 96
     264:	b0 e0       	ldi	r27, 0x00	; 0
     266:	ec ee       	ldi	r30, 0xEC	; 236
     268:	f6 e1       	ldi	r31, 0x16	; 22
     26a:	02 c0       	rjmp	.+4      	; 0x270 <__do_copy_data+0x10>
     26c:	05 90       	lpm	r0, Z+
     26e:	0d 92       	st	X+, r0
     270:	a2 3a       	cpi	r26, 0xA2	; 162
     272:	b1 07       	cpc	r27, r17
     274:	d9 f7       	brne	.-10     	; 0x26c <__do_copy_data+0xc>

00000276 <__do_clear_bss>:
     276:	12 e0       	ldi	r17, 0x02	; 2
     278:	a2 ea       	ldi	r26, 0xA2	; 162
     27a:	b0 e0       	ldi	r27, 0x00	; 0
     27c:	01 c0       	rjmp	.+2      	; 0x280 <.do_clear_bss_start>

0000027e <.do_clear_bss_loop>:
     27e:	1d 92       	st	X+, r1

00000280 <.do_clear_bss_start>:
     280:	af 35       	cpi	r26, 0x5F	; 95
     282:	b1 07       	cpc	r27, r17
     284:	e1 f7       	brne	.-8      	; 0x27e <.do_clear_bss_loop>
     286:	0e 94 c9 02 	call	0x592	; 0x592 <main>
     28a:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <_exit>

0000028e <__bad_interrupt>:
     28e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000292 <swap_byte>:
//=======================================================================================
#define REG_INPUT_START 1000
#define REG_INPUT_NREGS 50
//=======================================================================================
USHORT swap_byte(USHORT v)
{
     292:	df 93       	push	r29
     294:	cf 93       	push	r28
     296:	00 d0       	rcall	.+0      	; 0x298 <swap_byte+0x6>
     298:	00 d0       	rcall	.+0      	; 0x29a <swap_byte+0x8>
     29a:	cd b7       	in	r28, 0x3d	; 61
     29c:	de b7       	in	r29, 0x3e	; 62
     29e:	9c 83       	std	Y+4, r25	; 0x04
     2a0:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char * vb = &v;
	unsigned char * rb = &r;
	rb[0] = vb[1];
	rb[1] = vb[0];
	return r;
}
     2a2:	8c 81       	ldd	r24, Y+4	; 0x04
     2a4:	9b 81       	ldd	r25, Y+3	; 0x03
     2a6:	0f 90       	pop	r0
     2a8:	0f 90       	pop	r0
     2aa:	0f 90       	pop	r0
     2ac:	0f 90       	pop	r0
     2ae:	cf 91       	pop	r28
     2b0:	df 91       	pop	r29
     2b2:	08 95       	ret

000002b4 <adc_init>:
void 
valve_close(){DOWNBIT(VALVE_PORT, VALVE_PIN);}
//=======================================================================================
void adc_init(void)
{
    ADMUX = 0x40;
     2b4:	80 e4       	ldi	r24, 0x40	; 64
     2b6:	87 b9       	out	0x07, r24	; 7
    ADCSRA = 0x84;  
     2b8:	84 e8       	ldi	r24, 0x84	; 132
     2ba:	86 b9       	out	0x06, r24	; 6
    SFIOR = 0x00;
     2bc:	10 be       	out	0x30, r1	; 48
}
     2be:	08 95       	ret

000002c0 <readAdc>:

int 
readAdc(char channel)
{
	ADMUX = (channel) | (1<<REFS0);
     2c0:	80 64       	ori	r24, 0x40	; 64
     2c2:	87 b9       	out	0x07, r24	; 7
	ADCSRA |=(1<<ADSC);
     2c4:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1<<ADSC)){};								
     2c6:	36 99       	sbic	0x06, 6	; 6
     2c8:	fe cf       	rjmp	.-4      	; 0x2c6 <readAdc+0x6>
	return ADCW;
     2ca:	24 b1       	in	r18, 0x04	; 4
     2cc:	35 b1       	in	r19, 0x05	; 5
}
     2ce:	c9 01       	movw	r24, r18
     2d0:	08 95       	ret

000002d2 <pinouts_init>:

void 
pinouts_init()
{
	UPBIT(LED_DDR_PORT, LED_B_PIN);
     2d2:	8f 9a       	sbi	0x11, 7	; 17
	UPBIT(LED_DDR_PORT, LED_R_PIN);
     2d4:	8e 9a       	sbi	0x11, 6	; 17
	UPBIT(VALVE_DDR_PORT, VALVE_PIN);
     2d6:	b8 9a       	sbi	0x17, 0	; 23
}
     2d8:	08 95       	ret

000002da <getSummeredHumidity>:
#define MBUS_POS_STOP				       20


//======================================================================================
uint16_t getSummeredHumidity()
{
     2da:	ef 92       	push	r14
     2dc:	ff 92       	push	r15
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
  uint16_t summ_humidity = 0;
  usRegInputBuf[MBUS_POS_HUMIDITY_0] = readAdc(HUMIDITY_PIN_0);
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	0e 94 60 01 	call	0x2c0	; 0x2c0 <readAdc>
     2e8:	e8 2e       	mov	r14, r24
     2ea:	e7 01       	movw	r28, r14
     2ec:	7e 01       	movw	r14, r28
     2ee:	f9 2e       	mov	r15, r25
     2f0:	e7 01       	movw	r28, r14
     2f2:	f0 92 a5 00 	sts	0x00A5, r15
     2f6:	e0 92 a4 00 	sts	0x00A4, r14
  summ_humidity += usRegInputBuf[MBUS_POS_HUMIDITY_0];
  usRegInputBuf[MBUS_POS_HUMIDITY_1] = readAdc(HUMIDITY_PIN_1);
     2fa:	82 e0       	ldi	r24, 0x02	; 2
     2fc:	0e 94 60 01 	call	0x2c0	; 0x2c0 <readAdc>
     300:	90 93 a7 00 	sts	0x00A7, r25
     304:	80 93 a6 00 	sts	0x00A6, r24
  summ_humidity += usRegInputBuf[MBUS_POS_HUMIDITY_1];
     308:	c8 0f       	add	r28, r24
     30a:	d9 1f       	adc	r29, r25
  usRegInputBuf[MBUS_POS_HUMIDITY_2] = readAdc(HUMIDITY_PIN_2);
     30c:	83 e0       	ldi	r24, 0x03	; 3
     30e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <readAdc>
     312:	90 93 a9 00 	sts	0x00A9, r25
     316:	80 93 a8 00 	sts	0x00A8, r24
  summ_humidity += usRegInputBuf[MBUS_POS_HUMIDITY_2];
     31a:	c8 0f       	add	r28, r24
     31c:	d9 1f       	adc	r29, r25
  usRegInputBuf[MBUS_POS_HUMIDITY_3] = readAdc(HUMIDITY_PIN_3);
     31e:	84 e0       	ldi	r24, 0x04	; 4
     320:	0e 94 60 01 	call	0x2c0	; 0x2c0 <readAdc>
     324:	90 93 ab 00 	sts	0x00AB, r25
     328:	80 93 aa 00 	sts	0x00AA, r24
  summ_humidity += usRegInputBuf[MBUS_POS_HUMIDITY_3];
     32c:	c8 0f       	add	r28, r24
     32e:	d9 1f       	adc	r29, r25
  
  summ_humidity /= 4;
     330:	d6 95       	lsr	r29
     332:	c7 95       	ror	r28
     334:	d6 95       	lsr	r29
     336:	c7 95       	ror	r28

  usRegInputBuf[MBUS_POS_HUMIDITY_AVGR] = summ_humidity;
     338:	d0 93 ad 00 	sts	0x00AD, r29
     33c:	c0 93 ac 00 	sts	0x00AC, r28
  return summ_humidity;
}
     340:	ce 01       	movw	r24, r28
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	ff 90       	pop	r15
     348:	ef 90       	pop	r14
     34a:	08 95       	ret

0000034c <getLight>:
//======================================================================================
unsigned int getLight()
{
  usRegInputBuf[MBUS_POS_LIGGHT] = readAdc(LIGHT_PIN);
     34c:	85 e0       	ldi	r24, 0x05	; 5
     34e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <readAdc>
     352:	80 93 ae 00 	sts	0x00AE, r24
     356:	90 93 af 00 	sts	0x00AF, r25
  return usRegInputBuf[MBUS_POS_LIGGHT];
}
     35a:	08 95       	ret

0000035c <valveClose>:
//======================================================================================
void valveClose()
{
  usRegInputBuf[MBUS_POS_VALVE_STATE] = VALVE_CLOSE_STATE;
     35c:	8f ef       	ldi	r24, 0xFF	; 255
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	90 93 b1 00 	sts	0x00B1, r25
     364:	80 93 b0 00 	sts	0x00B0, r24
void 
valve_open(){UPBIT(VALVE_PORT, VALVE_PIN);}

inline 
void 
valve_close(){DOWNBIT(VALVE_PORT, VALVE_PIN);}
     368:	c0 98       	cbi	0x18, 0	; 24
//======================================================================================
void valveClose()
{
  usRegInputBuf[MBUS_POS_VALVE_STATE] = VALVE_CLOSE_STATE;
  valve_close();
}
     36a:	08 95       	ret

0000036c <valveOpen>:
//======================================================================================
void valveOpen()
{
  usRegInputBuf[MBUS_POS_VALVE_STATE] = VALVE_OPEN_STATE;
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	90 93 b1 00 	sts	0x00B1, r25
     374:	80 93 b0 00 	sts	0x00B0, r24
#define VALVE_CLOSE_STATE 255
#define VALVE_OPEN_STATE 1

inline 
void 
valve_open(){UPBIT(VALVE_PORT, VALVE_PIN);}
     378:	c0 9a       	sbi	0x18, 0	; 24
//======================================================================================
void valveOpen()
{
  usRegInputBuf[MBUS_POS_VALVE_STATE] = VALVE_OPEN_STATE;
  valve_open();
}
     37a:	08 95       	ret

0000037c <is_need_watering>:
//======================================================================================
char is_need_watering(unsigned int humidity, unsigned int light)
{
  if (light < usRegInputBuf[MBUS_POS_LIGHT_NIGHT]){
     37c:	20 91 be 00 	lds	r18, 0x00BE
     380:	30 91 bf 00 	lds	r19, 0x00BF
     384:	62 17       	cp	r22, r18
     386:	73 07       	cpc	r23, r19
     388:	70 f0       	brcs	.+28     	; 0x3a6 <is_need_watering+0x2a>
    return 0; // to light for watering
  }

  if (humidity > usRegInputBuf[MBUS_POS_HUMIDITY_NEED_WATER]){
     38a:	20 91 b8 00 	lds	r18, 0x00B8
     38e:	30 91 b9 00 	lds	r19, 0x00B9
     392:	28 17       	cp	r18, r24
     394:	39 07       	cpc	r19, r25
     396:	48 f0       	brcs	.+18     	; 0x3aa <is_need_watering+0x2e>
    return 1;
  }

  if (humidity <= usRegInputBuf[MBUS_POS_HUMIDITY_STOP_WATER]){
     398:	20 91 ba 00 	lds	r18, 0x00BA
     39c:	30 91 bb 00 	lds	r19, 0x00BB
     3a0:	28 17       	cp	r18, r24
     3a2:	39 07       	cpc	r19, r25
     3a4:	20 f0       	brcs	.+8      	; 0x3ae <is_need_watering+0x32>
}
//======================================================================================
char is_need_watering(unsigned int humidity, unsigned int light)
{
  if (light < usRegInputBuf[MBUS_POS_LIGHT_NIGHT]){
    return 0; // to light for watering
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	08 95       	ret
  }

  if (humidity > usRegInputBuf[MBUS_POS_HUMIDITY_NEED_WATER]){
    return 1;
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	08 95       	ret

  if (humidity <= usRegInputBuf[MBUS_POS_HUMIDITY_STOP_WATER]){
    return 0;
  }
  
  return 2;
     3ae:	82 e0       	ldi	r24, 0x02	; 2
}
     3b0:	08 95       	ret

000003b2 <poll_machine>:
//=======================================================================================
enum States {WAITING = 11, WATERING = 22, MEASURING = 33};
void 
poll_machine()
{
     3b2:	8f 92       	push	r8
     3b4:	9f 92       	push	r9
     3b6:	af 92       	push	r10
     3b8:	bf 92       	push	r11
     3ba:	cf 92       	push	r12
     3bc:	df 92       	push	r13
     3be:	ef 92       	push	r14
     3c0:	ff 92       	push	r15
     3c2:	0f 93       	push	r16
     3c4:	1f 93       	push	r17
     3c6:	df 93       	push	r29
     3c8:	cf 93       	push	r28
     3ca:	0f 92       	push	r0
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
  static unsigned char state = MEASURING;
  usRegInputBuf[MBUS_POS_MACHINE_STATE] = state;
     3d0:	20 91 65 00 	lds	r18, 0x0065
     3d4:	20 93 b2 00 	sts	0x00B2, r18
     3d8:	10 92 b3 00 	sts	0x00B3, r1
  switch (state){
     3dc:	26 31       	cpi	r18, 0x16	; 22
     3de:	f9 f0       	breq	.+62     	; 0x41e <poll_machine+0x6c>
     3e0:	21 32       	cpi	r18, 0x21	; 33
     3e2:	c1 f1       	breq	.+112    	; 0x454 <poll_machine+0xa2>
     3e4:	2b 30       	cpi	r18, 0x0B	; 11
     3e6:	09 f0       	breq	.+2      	; 0x3ea <poll_machine+0x38>
     3e8:	c6 c0       	rjmp	.+396    	; 0x576 <__stack+0x117>
    case WAITING:
    {
      static unsigned int wait_counter = 0;
      if (wait_counter == 0) valveClose();
     3ea:	e0 90 12 01 	lds	r14, 0x0112
     3ee:	f0 90 13 01 	lds	r15, 0x0113
     3f2:	e1 14       	cp	r14, r1
     3f4:	f1 04       	cpc	r15, r1
     3f6:	11 f4       	brne	.+4      	; 0x3fc <poll_machine+0x4a>
     3f8:	0e 94 ae 01 	call	0x35c	; 0x35c <valveClose>
      wait_counter++;
     3fc:	08 94       	sec
     3fe:	e1 1c       	adc	r14, r1
     400:	f1 1c       	adc	r15, r1
     402:	f0 92 13 01 	sts	0x0113, r15
     406:	e0 92 12 01 	sts	0x0112, r14
      if (wait_counter >= WAIT_TIME){
     40a:	85 e0       	ldi	r24, 0x05	; 5
     40c:	e8 16       	cp	r14, r24
     40e:	f1 04       	cpc	r15, r1
     410:	08 f4       	brcc	.+2      	; 0x414 <poll_machine+0x62>
     412:	b1 c0       	rjmp	.+354    	; 0x576 <__stack+0x117>
        wait_counter = 0;
     414:	10 92 13 01 	sts	0x0113, r1
     418:	10 92 12 01 	sts	0x0112, r1
     41c:	19 c0       	rjmp	.+50     	; 0x450 <poll_machine+0x9e>
      break;
      
    case WATERING:
    {
      static unsigned int watering_counter = 0;
      if (watering_counter == 0) valveOpen();
     41e:	e0 90 10 01 	lds	r14, 0x0110
     422:	f0 90 11 01 	lds	r15, 0x0111
     426:	e1 14       	cp	r14, r1
     428:	f1 04       	cpc	r15, r1
     42a:	11 f4       	brne	.+4      	; 0x430 <poll_machine+0x7e>
     42c:	0e 94 b6 01 	call	0x36c	; 0x36c <valveOpen>
      watering_counter++;
     430:	08 94       	sec
     432:	e1 1c       	adc	r14, r1
     434:	f1 1c       	adc	r15, r1
     436:	f0 92 11 01 	sts	0x0111, r15
     43a:	e0 92 10 01 	sts	0x0110, r14
      if (watering_counter >= WATERING_TIME){
     43e:	e5 e0       	ldi	r30, 0x05	; 5
     440:	ee 16       	cp	r14, r30
     442:	f1 04       	cpc	r15, r1
     444:	08 f4       	brcc	.+2      	; 0x448 <poll_machine+0x96>
     446:	97 c0       	rjmp	.+302    	; 0x576 <__stack+0x117>
        watering_counter = 0;
     448:	10 92 11 01 	sts	0x0111, r1
     44c:	10 92 10 01 	sts	0x0110, r1
        state = MEASURING;
     450:	81 e2       	ldi	r24, 0x21	; 33
     452:	8f c0       	rjmp	.+286    	; 0x572 <__stack+0x113>
    case MEASURING:
    {
      static unsigned int measuring_counter = MEASURING_COUNTER;
      static unsigned long averaged_humidity = 0;
      static unsigned long averaged_light = 0;
	  usRegInputBuf[MBUS_POS_COUNT_DOWN_NEXT_CHECK] = measuring_counter;
     454:	80 91 63 00 	lds	r24, 0x0063
     458:	90 91 64 00 	lds	r25, 0x0064
     45c:	90 93 c3 00 	sts	0x00C3, r25
     460:	80 93 c2 00 	sts	0x00C2, r24

      if (measuring_counter-- > 0){
     464:	ac 01       	movw	r20, r24
     466:	41 50       	subi	r20, 0x01	; 1
     468:	50 40       	sbci	r21, 0x00	; 0
     46a:	50 93 64 00 	sts	0x0064, r21
     46e:	40 93 63 00 	sts	0x0063, r20
     472:	e0 90 0c 01 	lds	r14, 0x010C
     476:	f0 90 0d 01 	lds	r15, 0x010D
     47a:	00 91 0e 01 	lds	r16, 0x010E
     47e:	10 91 0f 01 	lds	r17, 0x010F
     482:	00 97       	sbiw	r24, 0x00	; 0
     484:	69 f1       	breq	.+90     	; 0x4e0 <__stack+0x81>
        averaged_humidity += getSummeredHumidity();
     486:	29 83       	std	Y+1, r18	; 0x01
     488:	0e 94 6d 01 	call	0x2da	; 0x2da <getSummeredHumidity>
     48c:	a0 e0       	ldi	r26, 0x00	; 0
     48e:	b0 e0       	ldi	r27, 0x00	; 0
     490:	8e 0d       	add	r24, r14
     492:	9f 1d       	adc	r25, r15
     494:	a0 1f       	adc	r26, r16
     496:	b1 1f       	adc	r27, r17
     498:	80 93 0c 01 	sts	0x010C, r24
     49c:	90 93 0d 01 	sts	0x010D, r25
     4a0:	a0 93 0e 01 	sts	0x010E, r26
     4a4:	b0 93 0f 01 	sts	0x010F, r27
        averaged_light += getLight();
     4a8:	e0 90 08 01 	lds	r14, 0x0108
     4ac:	f0 90 09 01 	lds	r15, 0x0109
     4b0:	00 91 0a 01 	lds	r16, 0x010A
     4b4:	10 91 0b 01 	lds	r17, 0x010B
     4b8:	0e 94 a6 01 	call	0x34c	; 0x34c <getLight>
     4bc:	a0 e0       	ldi	r26, 0x00	; 0
     4be:	b0 e0       	ldi	r27, 0x00	; 0
     4c0:	8e 0d       	add	r24, r14
     4c2:	9f 1d       	adc	r25, r15
     4c4:	a0 1f       	adc	r26, r16
     4c6:	b1 1f       	adc	r27, r17
     4c8:	80 93 08 01 	sts	0x0108, r24
     4cc:	90 93 09 01 	sts	0x0109, r25
     4d0:	a0 93 0a 01 	sts	0x010A, r26
     4d4:	b0 93 0b 01 	sts	0x010B, r27
        state = MEASURING;
     4d8:	29 81       	ldd	r18, Y+1	; 0x01
     4da:	20 93 65 00 	sts	0x0065, r18
     4de:	4b c0       	rjmp	.+150    	; 0x576 <__stack+0x117>
      }else{
        unsigned int humidity = averaged_humidity / MEASURING_COUNTER;
     4e0:	94 e6       	ldi	r25, 0x64	; 100
     4e2:	a9 2e       	mov	r10, r25
     4e4:	b1 2c       	mov	r11, r1
     4e6:	c1 2c       	mov	r12, r1
     4e8:	d1 2c       	mov	r13, r1
     4ea:	c8 01       	movw	r24, r16
     4ec:	b7 01       	movw	r22, r14
     4ee:	a6 01       	movw	r20, r12
     4f0:	95 01       	movw	r18, r10
     4f2:	0e 94 49 0b 	call	0x1692	; 0x1692 <__udivmodsi4>
     4f6:	79 01       	movw	r14, r18
     4f8:	8a 01       	movw	r16, r20
     4fa:	49 01       	movw	r8, r18
        unsigned int light = averaged_light / MEASURING_COUNTER;
     4fc:	60 91 08 01 	lds	r22, 0x0108
     500:	70 91 09 01 	lds	r23, 0x0109
     504:	80 91 0a 01 	lds	r24, 0x010A
     508:	90 91 0b 01 	lds	r25, 0x010B
     50c:	a6 01       	movw	r20, r12
     50e:	95 01       	movw	r18, r10
     510:	0e 94 49 0b 	call	0x1692	; 0x1692 <__udivmodsi4>
     514:	59 01       	movw	r10, r18
        usRegInputBuf[MBUS_POS_MEASURED_AVERAGE_HUMIDITY] = humidity;
     516:	f0 92 c5 00 	sts	0x00C5, r15
     51a:	e0 92 c4 00 	sts	0x00C4, r14
		usRegInputBuf[MBUS_POS_MEASURED_AVERAGE_LIGHT] = light;
     51e:	30 93 c7 00 	sts	0x00C7, r19
     522:	20 93 c6 00 	sts	0x00C6, r18
        measuring_counter = MEASURING_COUNTER;
     526:	84 e6       	ldi	r24, 0x64	; 100
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	90 93 64 00 	sts	0x0064, r25
     52e:	80 93 63 00 	sts	0x0063, r24
        averaged_humidity = 0;
     532:	10 92 0c 01 	sts	0x010C, r1
     536:	10 92 0d 01 	sts	0x010D, r1
     53a:	10 92 0e 01 	sts	0x010E, r1
     53e:	10 92 0f 01 	sts	0x010F, r1
        averaged_light = 0;
     542:	10 92 08 01 	sts	0x0108, r1
     546:	10 92 09 01 	sts	0x0109, r1
     54a:	10 92 0a 01 	sts	0x010A, r1
     54e:	10 92 0b 01 	sts	0x010B, r1

        if (is_need_watering(humidity, light) == 1){
     552:	c7 01       	movw	r24, r14
     554:	b9 01       	movw	r22, r18
     556:	0e 94 be 01 	call	0x37c	; 0x37c <is_need_watering>
     55a:	81 30       	cpi	r24, 0x01	; 1
     55c:	19 f4       	brne	.+6      	; 0x564 <__stack+0x105>
			state = WATERING;
     55e:	86 e1       	ldi	r24, 0x16	; 22
     560:	80 93 65 00 	sts	0x0065, r24
		} 
        if (is_need_watering(humidity, light) == 0){
     564:	c4 01       	movw	r24, r8
     566:	b5 01       	movw	r22, r10
     568:	0e 94 be 01 	call	0x37c	; 0x37c <is_need_watering>
     56c:	88 23       	and	r24, r24
     56e:	19 f4       	brne	.+6      	; 0x576 <__stack+0x117>
			state = WAITING;
     570:	8b e0       	ldi	r24, 0x0B	; 11
     572:	80 93 65 00 	sts	0x0065, r24
      break;
    default:
      break;
  }
  	
}
     576:	0f 90       	pop	r0
     578:	cf 91       	pop	r28
     57a:	df 91       	pop	r29
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	ff 90       	pop	r15
     582:	ef 90       	pop	r14
     584:	df 90       	pop	r13
     586:	cf 90       	pop	r12
     588:	bf 90       	pop	r11
     58a:	af 90       	pop	r10
     58c:	9f 90       	pop	r9
     58e:	8f 90       	pop	r8
     590:	08 95       	ret

00000592 <main>:
//=======================================================================================
// 					Start implementation 
//=======================================================================================
int
main( void )
{
     592:	df 92       	push	r13
     594:	ef 92       	push	r14
     596:	ff 92       	push	r15
     598:	0f 93       	push	r16
     59a:	1f 93       	push	r17
     59c:	df 93       	push	r29
     59e:	cf 93       	push	r28
     5a0:	00 d0       	rcall	.+0      	; 0x5a2 <main+0x10>
     5a2:	0f 92       	push	r0
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
    const UCHAR     ucSlaveID[] = { 0xAA, 0xBB, 0xCC };
     5a8:	de 01       	movw	r26, r28
     5aa:	11 96       	adiw	r26, 0x01	; 1
     5ac:	e0 e6       	ldi	r30, 0x60	; 96
     5ae:	f0 e0       	ldi	r31, 0x00	; 0
     5b0:	83 e0       	ldi	r24, 0x03	; 3
     5b2:	01 90       	ld	r0, Z+
     5b4:	0d 92       	st	X+, r0
     5b6:	81 50       	subi	r24, 0x01	; 1
     5b8:	e1 f7       	brne	.-8      	; 0x5b2 <main+0x20>
    eMBErrorCode    eStatus;

	pinouts_init();
     5ba:	0e 94 69 01 	call	0x2d2	; 0x2d2 <pinouts_init>
	adc_init();
     5be:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <adc_init>
	 
	//                 type    mbaddress    port  boud        parity
    eStatus = eMBInit( MB_RTU, MBUS_ID,     0,    MBUS_SPEED, MBUS_PARITY );
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	61 e0       	ldi	r22, 0x01	; 1
     5c6:	40 e0       	ldi	r20, 0x00	; 0
     5c8:	00 e0       	ldi	r16, 0x00	; 0
     5ca:	1b e4       	ldi	r17, 0x4B	; 75
     5cc:	20 e0       	ldi	r18, 0x00	; 0
     5ce:	30 e0       	ldi	r19, 0x00	; 0
     5d0:	ee 24       	eor	r14, r14
     5d2:	0e 94 03 05 	call	0xa06	; 0xa06 <eMBInit>
    eStatus = eMBSetSlaveID( 0x34, TRUE, ucSlaveID, 3 );
     5d6:	84 e3       	ldi	r24, 0x34	; 52
     5d8:	61 e0       	ldi	r22, 0x01	; 1
     5da:	ae 01       	movw	r20, r28
     5dc:	4f 5f       	subi	r20, 0xFF	; 255
     5de:	5f 4f       	sbci	r21, 0xFF	; 255
     5e0:	23 e0       	ldi	r18, 0x03	; 3
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	0e 94 de 0a 	call	0x15bc	; 0x15bc <eMBSetSlaveID>
    sei(  );
     5e8:	78 94       	sei

    // Enable the Modbus Protocol Stack. 
    eStatus = eMBEnable(  );
     5ea:	0e 94 b1 05 	call	0xb62	; 0xb62 <eMBEnable>

	usRegInputBuf[MBUS_POS_HUMIDITY_NEED_WATER] = HUMIDITY_NEED_WATER;
     5ee:	82 e5       	ldi	r24, 0x52	; 82
     5f0:	93 e0       	ldi	r25, 0x03	; 3
     5f2:	90 93 b9 00 	sts	0x00B9, r25
     5f6:	80 93 b8 00 	sts	0x00B8, r24
	usRegInputBuf[MBUS_POS_HUMIDITY_STOP_WATER] = HUMIDITY_STOP_WATER;
     5fa:	88 e5       	ldi	r24, 0x58	; 88
     5fc:	92 e0       	ldi	r25, 0x02	; 2
     5fe:	90 93 bb 00 	sts	0x00BB, r25
     602:	80 93 ba 00 	sts	0x00BA, r24
	usRegInputBuf[MBUS_POS_HUMIDITY_DELTA] = HUMIDITY_DELTA;
     606:	82 e3       	ldi	r24, 0x32	; 50
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	90 93 bd 00 	sts	0x00BD, r25
     60e:	80 93 bc 00 	sts	0x00BC, r24
	usRegInputBuf[MBUS_POS_LIGHT_NIGHT] = LIGHT_NIGHT;
     612:	8a ef       	ldi	r24, 0xFA	; 250
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	90 93 bf 00 	sts	0x00BF, r25
     61a:	80 93 be 00 	sts	0x00BE, r24
	usRegInputBuf[MBUS_POS_LIGHT_DELTA] = LIGHT_DELTA;
     61e:	84 e1       	ldi	r24, 0x14	; 20
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	90 93 c1 00 	sts	0x00C1, r25
     626:	80 93 c0 00 	sts	0x00C0, r24
	valveClose();
     62a:	0e 94 ae 01 	call	0x35c	; 0x35c <valveClose>
void 
led_off(char pin){DOWNBIT(LED_PORT, pin);}

inline 
void 
led_tagle(char pin){INVBIT(LED_PORT, pin);}
     62e:	30 e4       	ldi	r19, 0x40	; 64
     630:	d3 2e       	mov	r13, r19
//=======================================================================================
// 					Start implementation 
//=======================================================================================
int
main( void )
{
     632:	20 e8       	ldi	r18, 0x80	; 128
     634:	e2 2e       	mov	r14, r18
     636:	28 e3       	ldi	r18, 0x38	; 56
     638:	f2 2e       	mov	r15, r18
     63a:	21 e0       	ldi	r18, 0x01	; 1
     63c:	02 2f       	mov	r16, r18
     63e:	11 2d       	mov	r17, r1

	#define LAZY_TIMER_DEF 80000
	uint32_t lazy_timer = LAZY_TIMER_DEF;
    for( ;; )
    {
        ( void )eMBPoll(  );
     640:	0e 94 d3 05 	call	0xba6	; 0xba6 <eMBPoll>
		if (lazy_timer-- <= 0) {
     644:	08 94       	sec
     646:	e1 08       	sbc	r14, r1
     648:	f1 08       	sbc	r15, r1
     64a:	01 09       	sbc	r16, r1
     64c:	11 09       	sbc	r17, r1
     64e:	8f ef       	ldi	r24, 0xFF	; 255
     650:	e8 16       	cp	r14, r24
     652:	8f ef       	ldi	r24, 0xFF	; 255
     654:	f8 06       	cpc	r15, r24
     656:	8f ef       	ldi	r24, 0xFF	; 255
     658:	08 07       	cpc	r16, r24
     65a:	8f ef       	ldi	r24, 0xFF	; 255
     65c:	18 07       	cpc	r17, r24
     65e:	81 f7       	brne	.-32     	; 0x640 <main+0xae>
			poll_machine();
     660:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <poll_machine>
void 
led_off(char pin){DOWNBIT(LED_PORT, pin);}

inline 
void 
led_tagle(char pin){INVBIT(LED_PORT, pin);}
     664:	82 b3       	in	r24, 0x12	; 18
     666:	8d 25       	eor	r24, r13
     668:	82 bb       	out	0x12, r24	; 18
     66a:	e3 cf       	rjmp	.-58     	; 0x632 <main+0xa0>

0000066c <eMBRegInputCB>:
    }
}
//=======================================================================================
eMBErrorCode
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{	
     66c:	ef 92       	push	r14
     66e:	ff 92       	push	r15
     670:	0f 93       	push	r16
     672:	1f 93       	push	r17
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
	
  eMBErrorCode  eStatus = MB_ENOERR;
  if( ( usAddress == 1 ) && ( usNRegs <= REG_INPUT_NREGS ) ) {
     678:	61 30       	cpi	r22, 0x01	; 1
     67a:	71 05       	cpc	r23, r1
     67c:	51 f5       	brne	.+84     	; 0x6d2 <eMBRegInputCB+0x66>
     67e:	43 33       	cpi	r20, 0x33	; 51
     680:	51 05       	cpc	r21, r1
     682:	38 f5       	brcc	.+78     	; 0x6d2 <eMBRegInputCB+0x66>

  	  static USHORT x = 0;
	  USHORT * ref = pucRegBuffer;
     684:	18 2f       	mov	r17, r24
     686:	09 2f       	mov	r16, r25
      *ref++ = swap_byte(++x);
     688:	80 91 06 01 	lds	r24, 0x0106
     68c:	90 91 07 01 	lds	r25, 0x0107
     690:	01 96       	adiw	r24, 0x01	; 1
     692:	90 93 07 01 	sts	0x0107, r25
     696:	80 93 06 01 	sts	0x0106, r24
     69a:	0e 94 49 01 	call	0x292	; 0x292 <swap_byte>
     69e:	e1 2e       	mov	r14, r17
     6a0:	e7 01       	movw	r28, r14
     6a2:	7e 01       	movw	r14, r28
     6a4:	f0 2e       	mov	r15, r16
     6a6:	e7 01       	movw	r28, r14
     6a8:	89 93       	st	Y+, r24
     6aa:	99 93       	st	Y+, r25
     6ac:	02 ea       	ldi	r16, 0xA2	; 162
     6ae:	10 e0       	ldi	r17, 0x00	; 0
	  
	  for(char cc = 0; cc <= MBUS_POS_STOP; cc++){
		*ref++ = swap_byte(usRegInputBuf[cc]);  
     6b0:	f8 01       	movw	r30, r16
     6b2:	81 91       	ld	r24, Z+
     6b4:	91 91       	ld	r25, Z+
     6b6:	8f 01       	movw	r16, r30
     6b8:	0e 94 49 01 	call	0x292	; 0x292 <swap_byte>
     6bc:	89 93       	st	Y+, r24
     6be:	99 93       	st	Y+, r25

  	  static USHORT x = 0;
	  USHORT * ref = pucRegBuffer;
      *ref++ = swap_byte(++x);
	  
	  for(char cc = 0; cc <= MBUS_POS_STOP; cc++){
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	0c 3c       	cpi	r16, 0xCC	; 204
     6c4:	1f 07       	cpc	r17, r31
     6c6:	a1 f7       	brne	.-24     	; 0x6b0 <eMBRegInputCB+0x44>
void 
led_off(char pin){DOWNBIT(LED_PORT, pin);}

inline 
void 
led_tagle(char pin){INVBIT(LED_PORT, pin);}
     6c8:	82 b3       	in	r24, 0x12	; 18
     6ca:	80 58       	subi	r24, 0x80	; 128
     6cc:	82 bb       	out	0x12, r24	; 18
//=======================================================================================
eMBErrorCode
eMBRegInputCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs )
{	
	
  eMBErrorCode  eStatus = MB_ENOERR;
     6ce:	80 e0       	ldi	r24, 0x00	; 0
  if( ( usAddress == 1 ) && ( usNRegs <= REG_INPUT_NREGS ) ) {
     6d0:	01 c0       	rjmp	.+2      	; 0x6d4 <eMBRegInputCB+0x68>
      //*ref++ = swap_byte(usRegInputBuf[4]);

	  led_tagle(LED_B_PIN);
  }
  else {
    eStatus = MB_ENOREG;
     6d2:	81 e0       	ldi	r24, 0x01	; 1
  }
  return eStatus;
}
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	1f 91       	pop	r17
     6da:	0f 91       	pop	r16
     6dc:	ff 90       	pop	r15
     6de:	ef 90       	pop	r14
     6e0:	08 95       	ret

000006e2 <eMBRegHoldingCB>:
//=======================================================================================
eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
                 eMBRegisterMode eMode )
{
     6e2:	ef 92       	push	r14
     6e4:	ff 92       	push	r15
     6e6:	0f 93       	push	r16
     6e8:	1f 93       	push	r17
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
     6ee:	ec 01       	movw	r28, r24
	
  eMBErrorCode  eStatus = MB_ENOERR;
  if( ( usAddress == 1 ) && ( usNRegs <= REG_INPUT_NREGS ) ) {
     6f0:	61 30       	cpi	r22, 0x01	; 1
     6f2:	71 05       	cpc	r23, r1
     6f4:	d1 f5       	brne	.+116    	; 0x76a <eMBRegHoldingCB+0x88>
     6f6:	43 33       	cpi	r20, 0x33	; 51
     6f8:	51 05       	cpc	r21, r1
     6fa:	b8 f5       	brcc	.+110    	; 0x76a <eMBRegHoldingCB+0x88>
    if( eMode == MB_REG_READ ) {
     6fc:	22 23       	and	r18, r18
     6fe:	99 f4       	brne	.+38     	; 0x726 <eMBRegHoldingCB+0x44>

  	  USHORT * ref = pucRegBuffer;
     700:	02 ea       	ldi	r16, 0xA2	; 162
     702:	10 e0       	ldi	r17, 0x00	; 0
  }
  return eStatus;
}
//=======================================================================================
eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
     704:	4a e2       	ldi	r20, 0x2A	; 42
     706:	e4 2e       	mov	r14, r20
     708:	f1 2c       	mov	r15, r1
     70a:	e8 0e       	add	r14, r24
     70c:	f9 1e       	adc	r15, r25
  if( ( usAddress == 1 ) && ( usNRegs <= REG_INPUT_NREGS ) ) {
    if( eMode == MB_REG_READ ) {

  	  USHORT * ref = pucRegBuffer;
	  for(char cc = 0; cc <= MBUS_POS_STOP; cc++){
		*ref++ = swap_byte(usRegInputBuf[cc]);  
     70e:	f8 01       	movw	r30, r16
     710:	81 91       	ld	r24, Z+
     712:	91 91       	ld	r25, Z+
     714:	8f 01       	movw	r16, r30
     716:	0e 94 49 01 	call	0x292	; 0x292 <swap_byte>
     71a:	89 93       	st	Y+, r24
     71c:	99 93       	st	Y+, r25
  eMBErrorCode  eStatus = MB_ENOERR;
  if( ( usAddress == 1 ) && ( usNRegs <= REG_INPUT_NREGS ) ) {
    if( eMode == MB_REG_READ ) {

  	  USHORT * ref = pucRegBuffer;
	  for(char cc = 0; cc <= MBUS_POS_STOP; cc++){
     71e:	ce 15       	cp	r28, r14
     720:	df 05       	cpc	r29, r15
     722:	a9 f7       	brne	.-22     	; 0x70e <eMBRegHoldingCB+0x2c>
     724:	20 c0       	rjmp	.+64     	; 0x766 <eMBRegHoldingCB+0x84>
		*ref++ = swap_byte(usRegInputBuf[cc]);  
	  }
    }
    else {
		USHORT * ref = pucRegBuffer;
	    usRegInputBuf[MBUS_POS_LIGHT_NIGHT] = swap_byte(*ref++);
     726:	8c 01       	movw	r16, r24
     728:	0e 5f       	subi	r16, 0xFE	; 254
     72a:	1f 4f       	sbci	r17, 0xFF	; 255
     72c:	88 81       	ld	r24, Y
     72e:	99 81       	ldd	r25, Y+1	; 0x01
     730:	0e 94 49 01 	call	0x292	; 0x292 <swap_byte>
     734:	90 93 bf 00 	sts	0x00BF, r25
     738:	80 93 be 00 	sts	0x00BE, r24
	    usRegInputBuf[MBUS_POS_HUMIDITY_NEED_WATER] = swap_byte(*ref++);
     73c:	8a 81       	ldd	r24, Y+2	; 0x02
     73e:	9b 81       	ldd	r25, Y+3	; 0x03
     740:	0e 94 49 01 	call	0x292	; 0x292 <swap_byte>
     744:	90 93 b9 00 	sts	0x00B9, r25
     748:	80 93 b8 00 	sts	0x00B8, r24
	    usRegInputBuf[MBUS_POS_HUMIDITY_STOP_WATER] = swap_byte(*ref++);
     74c:	f8 01       	movw	r30, r16
     74e:	82 81       	ldd	r24, Z+2	; 0x02
     750:	93 81       	ldd	r25, Z+3	; 0x03
     752:	0e 94 49 01 	call	0x292	; 0x292 <swap_byte>
     756:	90 93 bb 00 	sts	0x00BB, r25
     75a:	80 93 ba 00 	sts	0x00BA, r24
void 
led_off(char pin){DOWNBIT(LED_PORT, pin);}

inline 
void 
led_tagle(char pin){INVBIT(LED_PORT, pin);}
     75e:	82 b3       	in	r24, 0x12	; 18
     760:	90 e4       	ldi	r25, 0x40	; 64
     762:	89 27       	eor	r24, r25
     764:	82 bb       	out	0x12, r24	; 18
eMBErrorCode
eMBRegHoldingCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNRegs,
                 eMBRegisterMode eMode )
{
	
  eMBErrorCode  eStatus = MB_ENOERR;
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	01 c0       	rjmp	.+2      	; 0x76c <eMBRegHoldingCB+0x8a>
      //pucRegBuffer++;
      //PORTB = ~(*pucRegBuffer++);
    }
  }
  else {
    eStatus = MB_ENOREG;
     76a:	81 e0       	ldi	r24, 0x01	; 1
	//eStatus = MB_ENORES;
  }
  return eStatus;
}
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	1f 91       	pop	r17
     772:	0f 91       	pop	r16
     774:	ff 90       	pop	r15
     776:	ef 90       	pop	r14
     778:	08 95       	ret

0000077a <eMBRegCoilsCB>:
eMBErrorCode
eMBRegCoilsCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNCoils,
               eMBRegisterMode eMode )
{
    return MB_ENOREG;
}
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	08 95       	ret

0000077e <eMBRegDiscreteCB>:
//=======================================================================================
eMBErrorCode
eMBRegDiscreteCB( UCHAR * pucRegBuffer, USHORT usAddress, USHORT usNDiscrete )
{
    return MB_ENOREG;
}
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	08 95       	ret

00000782 <usMBCRC16>:
    0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
     782:	dc 01       	movw	r26, r24
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
     784:	4f ef       	ldi	r20, 0xFF	; 255
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
    UCHAR           ucCRCHi = 0xFF;
     786:	5f ef       	ldi	r21, 0xFF	; 255
    UCHAR           ucCRCLo = 0xFF;
    int             iIndex;

    while( usLen-- )
     788:	0f c0       	rjmp	.+30     	; 0x7a8 <usMBCRC16+0x26>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
     78a:	2d 91       	ld	r18, X+
        ucCRCLo = ucCRCHi ^ pgm_read_byte( &aucCRCHi[iIndex] );
     78c:	84 2f       	mov	r24, r20
     78e:	82 27       	eor	r24, r18
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	fc 01       	movw	r30, r24
     794:	ec 5a       	subi	r30, 0xAC	; 172
     796:	ff 4f       	sbci	r31, 0xFF	; 255
     798:	44 91       	lpm	r20, Z+
     79a:	45 27       	eor	r20, r21
        ucCRCHi = pgm_read_byte( &aucCRCLo[iIndex] );;
     79c:	8c 5a       	subi	r24, 0xAC	; 172
     79e:	9e 4f       	sbci	r25, 0xFE	; 254
     7a0:	fc 01       	movw	r30, r24
     7a2:	54 91       	lpm	r21, Z+
     7a4:	61 50       	subi	r22, 0x01	; 1
     7a6:	70 40       	sbci	r23, 0x00	; 0
{
    UCHAR           ucCRCHi = 0xFF;
    UCHAR           ucCRCLo = 0xFF;
    int             iIndex;

    while( usLen-- )
     7a8:	61 15       	cp	r22, r1
     7aa:	71 05       	cpc	r23, r1
     7ac:	71 f7       	brne	.-36     	; 0x78a <usMBCRC16+0x8>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
        ucCRCLo = ucCRCHi ^ pgm_read_byte( &aucCRCHi[iIndex] );
        ucCRCHi = pgm_read_byte( &aucCRCLo[iIndex] );;
    }
    return ucCRCHi << 8 | ucCRCLo;
     7ae:	35 2f       	mov	r19, r21
     7b0:	20 e0       	ldi	r18, 0x00	; 0
     7b2:	e4 2f       	mov	r30, r20
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	e2 2b       	or	r30, r18
     7b8:	f3 2b       	or	r31, r19
}
     7ba:	cf 01       	movw	r24, r30
     7bc:	08 95       	ret

000007be <xMBPortEventInit>:

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
    xEventInQueue = FALSE;
     7be:	10 92 14 01 	sts	0x0114, r1
    return TRUE;
}
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	08 95       	ret

000007c6 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
    xEventInQueue = TRUE;
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	90 93 14 01 	sts	0x0114, r25
    eQueuedEvent = eEvent;
     7cc:	80 93 15 01 	sts	0x0115, r24
    return TRUE;
}
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	08 95       	ret

000007d4 <xMBPortEventGet>:
BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
    BOOL            xEventHappened = FALSE;

    if( xEventInQueue )
     7d4:	20 91 14 01 	lds	r18, 0x0114
     7d8:	22 23       	and	r18, r18
     7da:	41 f0       	breq	.+16     	; 0x7ec <xMBPortEventGet+0x18>
    {
        *eEvent = eQueuedEvent;
     7dc:	20 91 15 01 	lds	r18, 0x0115
     7e0:	fc 01       	movw	r30, r24
     7e2:	20 83       	st	Z, r18
        xEventInQueue = FALSE;
     7e4:	10 92 14 01 	sts	0x0114, r1
        xEventHappened = TRUE;
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	08 95       	ret
}

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
    BOOL            xEventHappened = FALSE;
     7ec:	80 e0       	ldi	r24, 0x00	; 0
        *eEvent = eQueuedEvent;
        xEventInQueue = FALSE;
        xEventHappened = TRUE;
    }
    return xEventHappened;
}
     7ee:	08 95       	ret

000007f0 <vMBPortSerialEnable>:

void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
#ifdef RTS_ENABLE
    UCSRB |= _BV( TXEN ) | _BV(TXCIE);
     7f0:	9a b1       	in	r25, 0x0a	; 10
     7f2:	98 64       	ori	r25, 0x48	; 72
     7f4:	9a b9       	out	0x0a, r25	; 10
#else
    UCSRB |= _BV( TXEN );
#endif

    if( xRxEnable )
     7f6:	88 23       	and	r24, r24
     7f8:	19 f0       	breq	.+6      	; 0x800 <vMBPortSerialEnable+0x10>
    {
        UCSRB |= _BV( RXEN ) | _BV( RXCIE );
     7fa:	8a b1       	in	r24, 0x0a	; 10
     7fc:	80 69       	ori	r24, 0x90	; 144
     7fe:	02 c0       	rjmp	.+4      	; 0x804 <vMBPortSerialEnable+0x14>
    }
    else
    {
        UCSRB &= ~( _BV( RXEN ) | _BV( RXCIE ) );
     800:	8a b1       	in	r24, 0x0a	; 10
     802:	8f 76       	andi	r24, 0x6F	; 111
     804:	8a b9       	out	0x0a, r24	; 10
    }

    if( xTxEnable )
     806:	66 23       	and	r22, r22
     808:	29 f0       	breq	.+10     	; 0x814 <vMBPortSerialEnable+0x24>
    {
        UCSRB |= _BV( TXEN ) | _BV( UDRE );
     80a:	8a b1       	in	r24, 0x0a	; 10
     80c:	88 62       	ori	r24, 0x28	; 40
     80e:	8a b9       	out	0x0a, r24	; 10
#ifdef RTS_ENABLE
        RTS_HIGH;
     810:	92 9a       	sbi	0x12, 2	; 18
     812:	08 95       	ret
#endif
    }
    else
    {
        UCSRB &= ~( _BV( UDRE ) );
     814:	55 98       	cbi	0x0a, 5	; 10
     816:	08 95       	ret

00000818 <xMBPortSerialInit>:
    }
}

BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
     818:	cf 92       	push	r12
     81a:	df 92       	push	r13
     81c:	ef 92       	push	r14
     81e:	ff 92       	push	r15
     820:	0f 93       	push	r16
     822:	1f 93       	push	r17
     824:	6a 01       	movw	r12, r20
     826:	7b 01       	movw	r14, r22
     828:	12 2f       	mov	r17, r18
    UCHAR ucUCSRC = 0;

    /* prevent compiler warning. */
    (void)ucPORT;
	
    UBRR = UART_BAUD_CALC( ulBaudRate, F_CPU );
     82a:	84 e0       	ldi	r24, 0x04	; 4
     82c:	cc 0c       	add	r12, r12
     82e:	dd 1c       	adc	r13, r13
     830:	ee 1c       	adc	r14, r14
     832:	ff 1c       	adc	r15, r15
     834:	8a 95       	dec	r24
     836:	d1 f7       	brne	.-12     	; 0x82c <xMBPortSerialInit+0x14>
     838:	60 e0       	ldi	r22, 0x00	; 0
     83a:	70 e8       	ldi	r23, 0x80	; 128
     83c:	80 e7       	ldi	r24, 0x70	; 112
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	a7 01       	movw	r20, r14
     842:	96 01       	movw	r18, r12
     844:	0e 94 49 0b 	call	0x1692	; 0x1692 <__udivmodsi4>
     848:	21 50       	subi	r18, 0x01	; 1
     84a:	29 b9       	out	0x09, r18	; 9
     84c:	03 30       	cpi	r16, 0x03	; 3
     84e:	30 f4       	brcc	.+12     	; 0x85c <xMBPortSerialInit+0x44>
     850:	e0 2f       	mov	r30, r16
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	ea 59       	subi	r30, 0x9A	; 154
     856:	ff 4f       	sbci	r31, 0xFF	; 255
     858:	80 81       	ld	r24, Z
     85a:	01 c0       	rjmp	.+2      	; 0x85e <xMBPortSerialInit+0x46>
     85c:	80 e0       	ldi	r24, 0x00	; 0
            break;
        case MB_PAR_NONE:
            break;
    }

    switch ( ucDataBits )
     85e:	17 30       	cpi	r17, 0x07	; 7
     860:	21 f0       	breq	.+8      	; 0x86a <xMBPortSerialInit+0x52>
     862:	18 30       	cpi	r17, 0x08	; 8
     864:	19 f4       	brne	.+6      	; 0x86c <xMBPortSerialInit+0x54>
    {
        case 8:
            ucUCSRC |= _BV( UCSZ0 ) | _BV( UCSZ1 );
     866:	86 60       	ori	r24, 0x06	; 6
            break;
     868:	01 c0       	rjmp	.+2      	; 0x86c <xMBPortSerialInit+0x54>
        case 7:
            ucUCSRC |= _BV( UCSZ1 );
     86a:	84 60       	ori	r24, 0x04	; 4
#elif defined (__AVR_ATmega169__)
    UCSRC |= ucUCSRC;
#elif defined (__AVR_ATmega8__)
    UCSRC = _BV( URSEL ) | ucUCSRC;
#elif defined (__AVR_ATmega16__)
    UCSRC = _BV( URSEL ) | ucUCSRC;
     86c:	80 68       	ori	r24, 0x80	; 128
     86e:	80 bd       	out	0x20, r24	; 32
    UCSRC = _BV( URSEL ) | ucUCSRC;
#elif defined (__AVR_ATmega128__)
    UCSRC |= ucUCSRC;
#endif

    vMBPortSerialEnable( FALSE, FALSE );
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <vMBPortSerialEnable>

#ifdef RTS_ENABLE
    RTS_INIT;
     878:	8a 9a       	sbi	0x11, 2	; 17
     87a:	92 98       	cbi	0x12, 2	; 18
#endif
    return TRUE;
}
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	1f 91       	pop	r17
     880:	0f 91       	pop	r16
     882:	ff 90       	pop	r15
     884:	ef 90       	pop	r14
     886:	df 90       	pop	r13
     888:	cf 90       	pop	r12
     88a:	08 95       	ret

0000088c <xMBPortSerialPutByte>:

BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
    UDR = ucByte;
     88c:	8c b9       	out	0x0c, r24	; 12
    return TRUE;
}
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	08 95       	ret

00000892 <xMBPortSerialGetByte>:

BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
    *pucByte = UDR;
     892:	2c b1       	in	r18, 0x0c	; 12
     894:	fc 01       	movw	r30, r24
     896:	20 83       	st	Z, r18
    return TRUE;
}
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	08 95       	ret

0000089c <__vector_12>:

SIGNAL( SIG_USART_DATA )
{
     89c:	1f 92       	push	r1
     89e:	0f 92       	push	r0
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	0f 92       	push	r0
     8a4:	11 24       	eor	r1, r1
     8a6:	2f 93       	push	r18
     8a8:	3f 93       	push	r19
     8aa:	4f 93       	push	r20
     8ac:	5f 93       	push	r21
     8ae:	6f 93       	push	r22
     8b0:	7f 93       	push	r23
     8b2:	8f 93       	push	r24
     8b4:	9f 93       	push	r25
     8b6:	af 93       	push	r26
     8b8:	bf 93       	push	r27
     8ba:	ef 93       	push	r30
     8bc:	ff 93       	push	r31
    pxMBFrameCBTransmitterEmpty(  );
     8be:	e0 91 55 01 	lds	r30, 0x0155
     8c2:	f0 91 56 01 	lds	r31, 0x0156
     8c6:	09 95       	icall
}
     8c8:	ff 91       	pop	r31
     8ca:	ef 91       	pop	r30
     8cc:	bf 91       	pop	r27
     8ce:	af 91       	pop	r26
     8d0:	9f 91       	pop	r25
     8d2:	8f 91       	pop	r24
     8d4:	7f 91       	pop	r23
     8d6:	6f 91       	pop	r22
     8d8:	5f 91       	pop	r21
     8da:	4f 91       	pop	r20
     8dc:	3f 91       	pop	r19
     8de:	2f 91       	pop	r18
     8e0:	0f 90       	pop	r0
     8e2:	0f be       	out	0x3f, r0	; 63
     8e4:	0f 90       	pop	r0
     8e6:	1f 90       	pop	r1
     8e8:	18 95       	reti

000008ea <__vector_11>:

SIGNAL( SIG_USART_RECV )
{
     8ea:	1f 92       	push	r1
     8ec:	0f 92       	push	r0
     8ee:	0f b6       	in	r0, 0x3f	; 63
     8f0:	0f 92       	push	r0
     8f2:	11 24       	eor	r1, r1
     8f4:	2f 93       	push	r18
     8f6:	3f 93       	push	r19
     8f8:	4f 93       	push	r20
     8fa:	5f 93       	push	r21
     8fc:	6f 93       	push	r22
     8fe:	7f 93       	push	r23
     900:	8f 93       	push	r24
     902:	9f 93       	push	r25
     904:	af 93       	push	r26
     906:	bf 93       	push	r27
     908:	ef 93       	push	r30
     90a:	ff 93       	push	r31
    pxMBFrameCBByteReceived(  );
     90c:	e0 91 59 01 	lds	r30, 0x0159
     910:	f0 91 5a 01 	lds	r31, 0x015A
     914:	09 95       	icall
}
     916:	ff 91       	pop	r31
     918:	ef 91       	pop	r30
     91a:	bf 91       	pop	r27
     91c:	af 91       	pop	r26
     91e:	9f 91       	pop	r25
     920:	8f 91       	pop	r24
     922:	7f 91       	pop	r23
     924:	6f 91       	pop	r22
     926:	5f 91       	pop	r21
     928:	4f 91       	pop	r20
     92a:	3f 91       	pop	r19
     92c:	2f 91       	pop	r18
     92e:	0f 90       	pop	r0
     930:	0f be       	out	0x3f, r0	; 63
     932:	0f 90       	pop	r0
     934:	1f 90       	pop	r1
     936:	18 95       	reti

00000938 <__vector_13>:

#ifdef RTS_ENABLE
SIGNAL( SIG_UART_TRANS )
{
     938:	1f 92       	push	r1
     93a:	0f 92       	push	r0
     93c:	0f b6       	in	r0, 0x3f	; 63
     93e:	0f 92       	push	r0
     940:	11 24       	eor	r1, r1
    RTS_LOW;
     942:	92 98       	cbi	0x12, 2	; 18
}
     944:	0f 90       	pop	r0
     946:	0f be       	out	0x3f, r0	; 63
     948:	0f 90       	pop	r0
     94a:	1f 90       	pop	r1
     94c:	18 95       	reti

0000094e <vMBPortTimersEnable>:


inline void
vMBPortTimersEnable(  )
{
    TCNT1 = 0x0000;
     94e:	1d bc       	out	0x2d, r1	; 45
     950:	1c bc       	out	0x2c, r1	; 44
    if( usTimerOCRADelta > 0 )
     952:	80 91 16 01 	lds	r24, 0x0116
     956:	90 91 17 01 	lds	r25, 0x0117
     95a:	00 97       	sbiw	r24, 0x00	; 0
     95c:	29 f0       	breq	.+10     	; 0x968 <vMBPortTimersEnable+0x1a>
    {
        TIMSK1 |= _BV( OCIE1A );
     95e:	29 b7       	in	r18, 0x39	; 57
     960:	20 61       	ori	r18, 0x10	; 16
     962:	29 bf       	out	0x39, r18	; 57
        OCR1A = usTimerOCRADelta;
     964:	9b bd       	out	0x2b, r25	; 43
     966:	8a bd       	out	0x2a, r24	; 42
    }

    TCCR1B |= _BV( CS12 ) | _BV( CS10 );
     968:	8e b5       	in	r24, 0x2e	; 46
     96a:	85 60       	ori	r24, 0x05	; 5
     96c:	8e bd       	out	0x2e, r24	; 46
}
     96e:	08 95       	ret

00000970 <vMBPortTimersDisable>:

inline void
vMBPortTimersDisable(  )
{
    /* Disable the timer. */
    TCCR1B &= ~( _BV( CS12 ) | _BV( CS10 ) );
     970:	8e b5       	in	r24, 0x2e	; 46
     972:	8a 7f       	andi	r24, 0xFA	; 250
     974:	8e bd       	out	0x2e, r24	; 46
    /* Disable the output compare interrupts for channel A/B. */
    TIMSK1 &= ~( _BV( OCIE1A ) );
     976:	89 b7       	in	r24, 0x39	; 57
     978:	8f 7e       	andi	r24, 0xEF	; 239
     97a:	89 bf       	out	0x39, r24	; 57
    /* Clear output compare flags for channel A/B. */
    TIFR1 |= _BV( OCF1A ) ;
     97c:	88 b7       	in	r24, 0x38	; 56
     97e:	80 61       	ori	r24, 0x10	; 16
     980:	88 bf       	out	0x38, r24	; 56
}
     982:	08 95       	ret

00000984 <xMBPortTimersInit>:
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
    /* Calculate overflow counter an OCR values for Timer1. */
    usTimerOCRADelta =
        ( MB_TIMER_TICKS * usTim1Timerout50us ) / ( MB_50US_TICKS );
     984:	bc 01       	movw	r22, r24
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	20 e2       	ldi	r18, 0x20	; 32
     98c:	3c e1       	ldi	r19, 0x1C	; 28
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	0e 94 2a 0b 	call	0x1654	; 0x1654 <__mulsi3>
     996:	20 e2       	ldi	r18, 0x20	; 32
     998:	3e e4       	ldi	r19, 0x4E	; 78
     99a:	40 e0       	ldi	r20, 0x00	; 0
     99c:	50 e0       	ldi	r21, 0x00	; 0
     99e:	0e 94 49 0b 	call	0x1692	; 0x1692 <__udivmodsi4>
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
    /* Calculate overflow counter an OCR values for Timer1. */
    usTimerOCRADelta =
     9a2:	30 93 17 01 	sts	0x0117, r19
     9a6:	20 93 16 01 	sts	0x0116, r18
        ( MB_TIMER_TICKS * usTim1Timerout50us ) / ( MB_50US_TICKS );

    TCCR1A = 0x00;
     9aa:	1f bc       	out	0x2f, r1	; 47
    TCCR1B = 0x00;
     9ac:	1e bc       	out	0x2e, r1	; 46
    TCCR1C = 0x00;
     9ae:	1f bc       	out	0x2f, r1	; 47

    vMBPortTimersDisable(  );
     9b0:	0e 94 b8 04 	call	0x970	; 0x970 <vMBPortTimersDisable>

    return TRUE;
}
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	08 95       	ret

000009b8 <__vector_6>:
    /* Clear output compare flags for channel A/B. */
    TIFR1 |= _BV( OCF1A ) ;
}

SIGNAL( SIG_OUTPUT_COMPARE1A )
{
     9b8:	1f 92       	push	r1
     9ba:	0f 92       	push	r0
     9bc:	0f b6       	in	r0, 0x3f	; 63
     9be:	0f 92       	push	r0
     9c0:	11 24       	eor	r1, r1
     9c2:	2f 93       	push	r18
     9c4:	3f 93       	push	r19
     9c6:	4f 93       	push	r20
     9c8:	5f 93       	push	r21
     9ca:	6f 93       	push	r22
     9cc:	7f 93       	push	r23
     9ce:	8f 93       	push	r24
     9d0:	9f 93       	push	r25
     9d2:	af 93       	push	r26
     9d4:	bf 93       	push	r27
     9d6:	ef 93       	push	r30
     9d8:	ff 93       	push	r31
    ( void )pxMBPortCBTimerExpired(  );
     9da:	e0 91 57 01 	lds	r30, 0x0157
     9de:	f0 91 58 01 	lds	r31, 0x0158
     9e2:	09 95       	icall
}
     9e4:	ff 91       	pop	r31
     9e6:	ef 91       	pop	r30
     9e8:	bf 91       	pop	r27
     9ea:	af 91       	pop	r26
     9ec:	9f 91       	pop	r25
     9ee:	8f 91       	pop	r24
     9f0:	7f 91       	pop	r23
     9f2:	6f 91       	pop	r22
     9f4:	5f 91       	pop	r21
     9f6:	4f 91       	pop	r20
     9f8:	3f 91       	pop	r19
     9fa:	2f 91       	pop	r18
     9fc:	0f 90       	pop	r0
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	0f 90       	pop	r0
     a02:	1f 90       	pop	r1
     a04:	18 95       	reti

00000a06 <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
     a06:	ef 92       	push	r14
     a08:	0f 93       	push	r16
     a0a:	1f 93       	push	r17
     a0c:	98 2f       	mov	r25, r24
     a0e:	86 2f       	mov	r24, r22
     a10:	64 2f       	mov	r22, r20
     a12:	a9 01       	movw	r20, r18
     a14:	98 01       	movw	r18, r16
     a16:	0e 2d       	mov	r16, r14
    eMBErrorCode    eStatus = MB_ENOERR;

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
     a18:	78 2f       	mov	r23, r24
     a1a:	71 50       	subi	r23, 0x01	; 1
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
    eMBErrorCode    eStatus = MB_ENOERR;

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
     a1c:	77 3f       	cpi	r23, 0xF7	; 247
     a1e:	08 f0       	brcs	.+2      	; 0xa22 <eMBInit+0x1c>
     a20:	41 c0       	rjmp	.+130    	; 0xaa4 <eMBInit+0x9e>
    {
        eStatus = MB_EINVAL;
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
     a22:	80 93 1a 01 	sts	0x011A, r24

        switch ( eMode )
     a26:	99 23       	and	r25, r25
     a28:	e9 f5       	brne	.+122    	; 0xaa4 <eMBInit+0x9e>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
     a2a:	ea e9       	ldi	r30, 0x9A	; 154
     a2c:	f6 e0       	ldi	r31, 0x06	; 6
     a2e:	f0 93 27 01 	sts	0x0127, r31
     a32:	e0 93 26 01 	sts	0x0126, r30
            pvMBFrameStopCur = eMBRTUStop;
     a36:	e5 ea       	ldi	r30, 0xA5	; 165
     a38:	f6 e0       	ldi	r31, 0x06	; 6
     a3a:	f0 93 25 01 	sts	0x0125, r31
     a3e:	e0 93 24 01 	sts	0x0124, r30
            peMBFrameSendCur = eMBRTUSend;
     a42:	e4 ee       	ldi	r30, 0xE4	; 228
     a44:	f6 e0       	ldi	r31, 0x06	; 6
     a46:	f0 93 1c 01 	sts	0x011C, r31
     a4a:	e0 93 1b 01 	sts	0x011B, r30
            peMBFrameReceiveCur = eMBRTUReceive;
     a4e:	ee ea       	ldi	r30, 0xAE	; 174
     a50:	f6 e0       	ldi	r31, 0x06	; 6
     a52:	f0 93 19 01 	sts	0x0119, r31
     a56:	e0 93 18 01 	sts	0x0118, r30
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
     a5a:	10 92 29 01 	sts	0x0129, r1
     a5e:	10 92 28 01 	sts	0x0128, r1
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
     a62:	e1 e3       	ldi	r30, 0x31	; 49
     a64:	f7 e0       	ldi	r31, 0x07	; 7
     a66:	f0 93 5a 01 	sts	0x015A, r31
     a6a:	e0 93 59 01 	sts	0x0159, r30
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
     a6e:	ea e7       	ldi	r30, 0x7A	; 122
     a70:	f7 e0       	ldi	r31, 0x07	; 7
     a72:	f0 93 56 01 	sts	0x0156, r31
     a76:	e0 93 55 01 	sts	0x0155, r30
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
     a7a:	e6 eb       	ldi	r30, 0xB6	; 182
     a7c:	f7 e0       	ldi	r31, 0x07	; 7
     a7e:	f0 93 58 01 	sts	0x0158, r31
     a82:	e0 93 57 01 	sts	0x0157, r30

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
     a86:	0e 94 61 06 	call	0xcc2	; 0xcc2 <eMBRTUInit>
     a8a:	08 2f       	mov	r16, r24
#endif
        default:
            eStatus = MB_EINVAL;
        }

        if( eStatus == MB_ENOERR )
     a8c:	88 23       	and	r24, r24
     a8e:	69 f4       	brne	.+26     	; 0xaaa <eMBInit+0xa4>
        {
            if( !xMBPortEventInit(  ) )
     a90:	0e 94 df 03 	call	0x7be	; 0x7be <xMBPortEventInit>
     a94:	88 23       	and	r24, r24
     a96:	41 f0       	breq	.+16     	; 0xaa8 <eMBInit+0xa2>
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
            }
            else
            {
                eMBCurrentMode = eMode;
     a98:	10 92 2a 01 	sts	0x012A, r1
                eMBState = STATE_DISABLED;
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	80 93 69 00 	sts	0x0069, r24
     aa2:	03 c0       	rjmp	.+6      	; 0xaaa <eMBInit+0xa4>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
     aa4:	02 e0       	ldi	r16, 0x02	; 2
     aa6:	01 c0       	rjmp	.+2      	; 0xaaa <eMBInit+0xa4>
        if( eStatus == MB_ENOERR )
        {
            if( !xMBPortEventInit(  ) )
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
     aa8:	03 e0       	ldi	r16, 0x03	; 3
                eMBState = STATE_DISABLED;
            }
        }
    }
    return eStatus;
}
     aaa:	80 2f       	mov	r24, r16
     aac:	1f 91       	pop	r17
     aae:	0f 91       	pop	r16
     ab0:	ef 90       	pop	r14
     ab2:	08 95       	ret

00000ab4 <eMBRegisterCB>:
eMBRegisterCB( UCHAR ucFunctionCode, pxMBFunctionHandler pxHandler )
{
    int             i;
    eMBErrorCode    eStatus;

    if( ( 0 < ucFunctionCode ) && ( ucFunctionCode <= 127 ) )
     ab4:	18 16       	cp	r1, r24
     ab6:	0c f0       	brlt	.+2      	; 0xaba <eMBRegisterCB+0x6>
     ab8:	41 c0       	rjmp	.+130    	; 0xb3c <eMBRegisterCB+0x88>
    {
        ENTER_CRITICAL_SECTION(  );
     aba:	f8 94       	cli
        if( pxHandler != NULL )
     abc:	61 15       	cp	r22, r1
     abe:	71 05       	cpc	r23, r1
     ac0:	11 f1       	breq	.+68     	; 0xb06 <eMBRegisterCB+0x52>
     ac2:	eb e6       	ldi	r30, 0x6B	; 107
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	20 e0       	ldi	r18, 0x00	; 0
     ac8:	30 e0       	ldi	r19, 0x00	; 0
        {
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
            {
                if( ( xFuncHandlers[i].pxHandler == NULL ) ||
     aca:	40 81       	ld	r20, Z
     acc:	51 81       	ldd	r21, Z+1	; 0x01
     ace:	41 15       	cp	r20, r1
     ad0:	51 05       	cpc	r21, r1
     ad2:	19 f0       	breq	.+6      	; 0xada <eMBRegisterCB+0x26>
     ad4:	46 17       	cp	r20, r22
     ad6:	57 07       	cpc	r21, r23
     ad8:	71 f4       	brne	.+28     	; 0xaf6 <eMBRegisterCB+0x42>
                    ( xFuncHandlers[i].pxHandler == pxHandler ) )
                {
                    xFuncHandlers[i].ucFunctionCode = ucFunctionCode;
     ada:	f9 01       	movw	r30, r18
     adc:	ee 0f       	add	r30, r30
     ade:	ff 1f       	adc	r31, r31
     ae0:	e2 0f       	add	r30, r18
     ae2:	f3 1f       	adc	r31, r19
     ae4:	e6 59       	subi	r30, 0x96	; 150
     ae6:	ff 4f       	sbci	r31, 0xFF	; 255
     ae8:	80 83       	st	Z, r24
                    xFuncHandlers[i].pxHandler = pxHandler;
     aea:	72 83       	std	Z+2, r23	; 0x02
     aec:	61 83       	std	Z+1, r22	; 0x01
                    break;
                }
            }
            eStatus = ( i != MB_FUNC_HANDLERS_MAX ) ? MB_ENOERR : MB_ENORES;
     aee:	20 31       	cpi	r18, 0x10	; 16
     af0:	31 05       	cpc	r19, r1
     af2:	09 f5       	brne	.+66     	; 0xb36 <eMBRegisterCB+0x82>
     af4:	06 c0       	rjmp	.+12     	; 0xb02 <eMBRegisterCB+0x4e>
    if( ( 0 < ucFunctionCode ) && ( ucFunctionCode <= 127 ) )
    {
        ENTER_CRITICAL_SECTION(  );
        if( pxHandler != NULL )
        {
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
     af6:	2f 5f       	subi	r18, 0xFF	; 255
     af8:	3f 4f       	sbci	r19, 0xFF	; 255
     afa:	33 96       	adiw	r30, 0x03	; 3
     afc:	20 31       	cpi	r18, 0x10	; 16
     afe:	31 05       	cpc	r19, r1
     b00:	21 f7       	brne	.-56     	; 0xaca <eMBRegisterCB+0x16>
                    xFuncHandlers[i].ucFunctionCode = ucFunctionCode;
                    xFuncHandlers[i].pxHandler = pxHandler;
                    break;
                }
            }
            eStatus = ( i != MB_FUNC_HANDLERS_MAX ) ? MB_ENOERR : MB_ENORES;
     b02:	84 e0       	ldi	r24, 0x04	; 4
     b04:	19 c0       	rjmp	.+50     	; 0xb38 <eMBRegisterCB+0x84>
    if( ( 0 < ucFunctionCode ) && ( ucFunctionCode <= 127 ) )
    {
        ENTER_CRITICAL_SECTION(  );
        if( pxHandler != NULL )
        {
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
     b06:	ea e6       	ldi	r30, 0x6A	; 106
     b08:	f0 e0       	ldi	r31, 0x00	; 0
    eMBErrorCode    eStatus;

    if( ( 0 < ucFunctionCode ) && ( ucFunctionCode <= 127 ) )
    {
        ENTER_CRITICAL_SECTION(  );
        if( pxHandler != NULL )
     b0a:	20 e0       	ldi	r18, 0x00	; 0
     b0c:	30 e0       	ldi	r19, 0x00	; 0
        }
        else
        {
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
            {
                if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
     b0e:	90 81       	ld	r25, Z
     b10:	98 17       	cp	r25, r24
     b12:	59 f4       	brne	.+22     	; 0xb2a <eMBRegisterCB+0x76>
                {
                    xFuncHandlers[i].ucFunctionCode = 0;
     b14:	f9 01       	movw	r30, r18
     b16:	ee 0f       	add	r30, r30
     b18:	ff 1f       	adc	r31, r31
     b1a:	e2 0f       	add	r30, r18
     b1c:	f3 1f       	adc	r31, r19
     b1e:	e6 59       	subi	r30, 0x96	; 150
     b20:	ff 4f       	sbci	r31, 0xFF	; 255
     b22:	10 82       	st	Z, r1
                    xFuncHandlers[i].pxHandler = NULL;
     b24:	12 82       	std	Z+2, r1	; 0x02
     b26:	11 82       	std	Z+1, r1	; 0x01
     b28:	06 c0       	rjmp	.+12     	; 0xb36 <eMBRegisterCB+0x82>
            }
            eStatus = ( i != MB_FUNC_HANDLERS_MAX ) ? MB_ENOERR : MB_ENORES;
        }
        else
        {
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
     b2a:	2f 5f       	subi	r18, 0xFF	; 255
     b2c:	3f 4f       	sbci	r19, 0xFF	; 255
     b2e:	33 96       	adiw	r30, 0x03	; 3
     b30:	20 31       	cpi	r18, 0x10	; 16
     b32:	31 05       	cpc	r19, r1
     b34:	61 f7       	brne	.-40     	; 0xb0e <eMBRegisterCB+0x5a>
                    xFuncHandlers[i].pxHandler = NULL;
                    break;
                }
            }
            /* Remove can't fail. */
            eStatus = MB_ENOERR;
     b36:	80 e0       	ldi	r24, 0x00	; 0
        }
        EXIT_CRITICAL_SECTION(  );
     b38:	78 94       	sei
     b3a:	08 95       	ret
    }
    else
    {
        eStatus = MB_EINVAL;
     b3c:	82 e0       	ldi	r24, 0x02	; 2
    }
    return eStatus;
}
     b3e:	08 95       	ret

00000b40 <eMBClose>:
eMBErrorCode
eMBClose( void )
{
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
     b40:	80 91 69 00 	lds	r24, 0x0069
     b44:	81 30       	cpi	r24, 0x01	; 1
     b46:	49 f4       	brne	.+18     	; 0xb5a <eMBClose+0x1a>
    {
        if( pvMBFrameCloseCur != NULL )
     b48:	e0 91 28 01 	lds	r30, 0x0128
     b4c:	f0 91 29 01 	lds	r31, 0x0129
     b50:	30 97       	sbiw	r30, 0x00	; 0
     b52:	29 f0       	breq	.+10     	; 0xb5e <eMBClose+0x1e>
        {
            pvMBFrameCloseCur(  );
     b54:	09 95       	icall


eMBErrorCode
eMBClose( void )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	08 95       	ret
            pvMBFrameCloseCur(  );
        }
    }
    else
    {
        eStatus = MB_EILLSTATE;
     b5a:	86 e0       	ldi	r24, 0x06	; 6
     b5c:	08 95       	ret


eMBErrorCode
eMBClose( void )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     b5e:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        eStatus = MB_EILLSTATE;
    }
    return eStatus;
}
     b60:	08 95       	ret

00000b62 <eMBEnable>:
eMBErrorCode
eMBEnable( void )
{
    eMBErrorCode    eStatus = MB_ENOERR;

    if( eMBState == STATE_DISABLED )
     b62:	80 91 69 00 	lds	r24, 0x0069
     b66:	81 30       	cpi	r24, 0x01	; 1
     b68:	49 f4       	brne	.+18     	; 0xb7c <eMBEnable+0x1a>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
     b6a:	e0 91 26 01 	lds	r30, 0x0126
     b6e:	f0 91 27 01 	lds	r31, 0x0127
     b72:	09 95       	icall
        eMBState = STATE_ENABLED;
     b74:	10 92 69 00 	sts	0x0069, r1
}

eMBErrorCode
eMBEnable( void )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	08 95       	ret
        pvMBFrameStartCur(  );
        eMBState = STATE_ENABLED;
    }
    else
    {
        eStatus = MB_EILLSTATE;
     b7c:	86 e0       	ldi	r24, 0x06	; 6
    }
    return eStatus;
}
     b7e:	08 95       	ret

00000b80 <eMBDisable>:
eMBErrorCode
eMBDisable( void )
{
    eMBErrorCode    eStatus;

    if( eMBState == STATE_ENABLED )
     b80:	80 91 69 00 	lds	r24, 0x0069
     b84:	88 23       	and	r24, r24
     b86:	49 f4       	brne	.+18     	; 0xb9a <eMBDisable+0x1a>
    {
        pvMBFrameStopCur(  );
     b88:	e0 91 24 01 	lds	r30, 0x0124
     b8c:	f0 91 25 01 	lds	r31, 0x0125
     b90:	09 95       	icall
        eMBState = STATE_DISABLED;
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	80 93 69 00 	sts	0x0069, r24
     b98:	02 c0       	rjmp	.+4      	; 0xb9e <eMBDisable+0x1e>
        eStatus = MB_ENOERR;
    }
    else if( eMBState == STATE_DISABLED )
     b9a:	81 30       	cpi	r24, 0x01	; 1
     b9c:	11 f4       	brne	.+4      	; 0xba2 <eMBDisable+0x22>
    {
        eStatus = MB_ENOERR;
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	08 95       	ret
    }
    else
    {
        eStatus = MB_EILLSTATE;
     ba2:	86 e0       	ldi	r24, 0x06	; 6
    }
    return eStatus;
}
     ba4:	08 95       	ret

00000ba6 <eMBPoll>:

eMBErrorCode
eMBPoll( void )
{
     ba6:	df 93       	push	r29
     ba8:	cf 93       	push	r28
     baa:	0f 92       	push	r0
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
     bb0:	80 91 69 00 	lds	r24, 0x0069
     bb4:	88 23       	and	r24, r24
     bb6:	09 f0       	breq	.+2      	; 0xbba <eMBPoll+0x14>
     bb8:	7d c0       	rjmp	.+250    	; 0xcb4 <eMBPoll+0x10e>
        return MB_EILLSTATE;
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
     bba:	ce 01       	movw	r24, r28
     bbc:	01 96       	adiw	r24, 0x01	; 1
     bbe:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <xMBPortEventGet>
     bc2:	81 30       	cpi	r24, 0x01	; 1
     bc4:	09 f0       	breq	.+2      	; 0xbc8 <eMBPoll+0x22>
     bc6:	78 c0       	rjmp	.+240    	; 0xcb8 <eMBPoll+0x112>
    {
        switch ( eEvent )
     bc8:	99 81       	ldd	r25, Y+1	; 0x01
     bca:	91 30       	cpi	r25, 0x01	; 1
     bcc:	21 f0       	breq	.+8      	; 0xbd6 <eMBPoll+0x30>
     bce:	92 30       	cpi	r25, 0x02	; 2
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <eMBPoll+0x2e>
     bd2:	72 c0       	rjmp	.+228    	; 0xcb8 <eMBPoll+0x112>
     bd4:	1b c0       	rjmp	.+54     	; 0xc0c <eMBPoll+0x66>
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
     bd6:	e0 91 18 01 	lds	r30, 0x0118
     bda:	f0 91 19 01 	lds	r31, 0x0119
     bde:	81 e2       	ldi	r24, 0x21	; 33
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	62 e2       	ldi	r22, 0x22	; 34
     be4:	71 e0       	ldi	r23, 0x01	; 1
     be6:	4e e1       	ldi	r20, 0x1E	; 30
     be8:	51 e0       	ldi	r21, 0x01	; 1
     bea:	09 95       	icall
            if( eStatus == MB_ENOERR )
     bec:	88 23       	and	r24, r24
     bee:	09 f0       	breq	.+2      	; 0xbf2 <eMBPoll+0x4c>
     bf0:	63 c0       	rjmp	.+198    	; 0xcb8 <eMBPoll+0x112>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
     bf2:	80 91 21 01 	lds	r24, 0x0121
     bf6:	90 91 1a 01 	lds	r25, 0x011A
     bfa:	89 17       	cp	r24, r25
     bfc:	19 f0       	breq	.+6      	; 0xc04 <eMBPoll+0x5e>
     bfe:	88 23       	and	r24, r24
     c00:	09 f0       	breq	.+2      	; 0xc04 <eMBPoll+0x5e>
     c02:	5a c0       	rjmp	.+180    	; 0xcb8 <eMBPoll+0x112>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
     c04:	82 e0       	ldi	r24, 0x02	; 2
     c06:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <xMBPortEventPost>
     c0a:	56 c0       	rjmp	.+172    	; 0xcb8 <eMBPoll+0x112>
                }
            }
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
     c0c:	a0 91 22 01 	lds	r26, 0x0122
     c10:	b0 91 23 01 	lds	r27, 0x0123
     c14:	9c 91       	ld	r25, X
     c16:	90 93 20 01 	sts	0x0120, r25
            eException = MB_EX_ILLEGAL_FUNCTION;
     c1a:	80 93 1d 01 	sts	0x011D, r24
     c1e:	ea e6       	ldi	r30, 0x6A	; 106
     c20:	f0 e0       	ldi	r31, 0x00	; 0
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	30 e0       	ldi	r19, 0x00	; 0
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
     c26:	80 81       	ld	r24, Z
     c28:	88 23       	and	r24, r24
     c2a:	c9 f0       	breq	.+50     	; 0xc5e <eMBPoll+0xb8>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
     c2c:	89 17       	cp	r24, r25
     c2e:	89 f4       	brne	.+34     	; 0xc52 <eMBPoll+0xac>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
     c30:	f9 01       	movw	r30, r18
     c32:	ee 0f       	add	r30, r30
     c34:	ff 1f       	adc	r31, r31
     c36:	e2 0f       	add	r30, r18
     c38:	f3 1f       	adc	r31, r19
     c3a:	e6 59       	subi	r30, 0x96	; 150
     c3c:	ff 4f       	sbci	r31, 0xFF	; 255
     c3e:	01 80       	ldd	r0, Z+1	; 0x01
     c40:	f2 81       	ldd	r31, Z+2	; 0x02
     c42:	e0 2d       	mov	r30, r0
     c44:	cd 01       	movw	r24, r26
     c46:	6e e1       	ldi	r22, 0x1E	; 30
     c48:	71 e0       	ldi	r23, 0x01	; 1
     c4a:	09 95       	icall
     c4c:	80 93 1d 01 	sts	0x011D, r24
                    break;
     c50:	06 c0       	rjmp	.+12     	; 0xc5e <eMBPoll+0xb8>
            break;

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
            eException = MB_EX_ILLEGAL_FUNCTION;
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
     c52:	2f 5f       	subi	r18, 0xFF	; 255
     c54:	3f 4f       	sbci	r19, 0xFF	; 255
     c56:	33 96       	adiw	r30, 0x03	; 3
     c58:	20 31       	cpi	r18, 0x10	; 16
     c5a:	31 05       	cpc	r19, r1
     c5c:	21 f7       	brne	.-56     	; 0xc26 <eMBPoll+0x80>
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
     c5e:	80 91 21 01 	lds	r24, 0x0121
     c62:	88 23       	and	r24, r24
     c64:	49 f1       	breq	.+82     	; 0xcb8 <eMBPoll+0x112>
            {
                if( eException != MB_EX_NONE )
     c66:	90 91 1d 01 	lds	r25, 0x011D
     c6a:	99 23       	and	r25, r25
     c6c:	99 f0       	breq	.+38     	; 0xc94 <eMBPoll+0xee>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
     c6e:	e0 91 22 01 	lds	r30, 0x0122
     c72:	f0 91 23 01 	lds	r31, 0x0123
     c76:	80 91 20 01 	lds	r24, 0x0120
     c7a:	80 68       	ori	r24, 0x80	; 128
     c7c:	80 83       	st	Z, r24
                    ucMBFrame[usLength++] = eException;
     c7e:	e0 91 22 01 	lds	r30, 0x0122
     c82:	f0 91 23 01 	lds	r31, 0x0123
     c86:	91 83       	std	Z+1, r25	; 0x01
     c88:	82 e0       	ldi	r24, 0x02	; 2
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	90 93 1f 01 	sts	0x011F, r25
     c90:	80 93 1e 01 	sts	0x011E, r24
                }
                if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }                
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
     c94:	60 91 22 01 	lds	r22, 0x0122
     c98:	70 91 23 01 	lds	r23, 0x0123
     c9c:	40 91 1e 01 	lds	r20, 0x011E
     ca0:	50 91 1f 01 	lds	r21, 0x011F
     ca4:	e0 91 1b 01 	lds	r30, 0x011B
     ca8:	f0 91 1c 01 	lds	r31, 0x011C
     cac:	80 91 1a 01 	lds	r24, 0x011A
     cb0:	09 95       	icall
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <eMBPoll+0x112>
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
    {
        return MB_EILLSTATE;
     cb4:	86 e0       	ldi	r24, 0x06	; 6
     cb6:	01 c0       	rjmp	.+2      	; 0xcba <eMBPoll+0x114>

        case EV_FRAME_SENT:
            break;
        }
    }
    return MB_ENOERR;
     cb8:	80 e0       	ldi	r24, 0x00	; 0
}
     cba:	0f 90       	pop	r0
     cbc:	cf 91       	pop	r28
     cbe:	df 91       	pop	r29
     cc0:	08 95       	ret

00000cc2 <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
     cc2:	cf 92       	push	r12
     cc4:	df 92       	push	r13
     cc6:	ef 92       	push	r14
     cc8:	ff 92       	push	r15
     cca:	0f 93       	push	r16
     ccc:	86 2f       	mov	r24, r22
     cce:	69 01       	movw	r12, r18
     cd0:	7a 01       	movw	r14, r20
    eMBErrorCode    eStatus = MB_ENOERR;
    ULONG           usTimerT35_50us;

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );
     cd2:	f8 94       	cli

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
     cd4:	ba 01       	movw	r22, r20
     cd6:	a9 01       	movw	r20, r18
     cd8:	28 e0       	ldi	r18, 0x08	; 8
     cda:	0e 94 0c 04 	call	0x818	; 0x818 <xMBPortSerialInit>
     cde:	81 30       	cpi	r24, 0x01	; 1
     ce0:	09 f5       	brne	.+66     	; 0xd24 <eMBRTUInit+0x62>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	c8 16       	cp	r12, r24
     ce6:	8b e4       	ldi	r24, 0x4B	; 75
     ce8:	d8 06       	cpc	r13, r24
     cea:	80 e0       	ldi	r24, 0x00	; 0
     cec:	e8 06       	cpc	r14, r24
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	f8 06       	cpc	r15, r24
     cf2:	68 f4       	brcc	.+26     	; 0xd0e <eMBRTUInit+0x4c>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
     cf4:	a7 01       	movw	r20, r14
     cf6:	96 01       	movw	r18, r12
     cf8:	22 0f       	add	r18, r18
     cfa:	33 1f       	adc	r19, r19
     cfc:	44 1f       	adc	r20, r20
     cfe:	55 1f       	adc	r21, r21
     d00:	60 ea       	ldi	r22, 0xA0	; 160
     d02:	7f e7       	ldi	r23, 0x7F	; 127
     d04:	87 e1       	ldi	r24, 0x17	; 23
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	0e 94 49 0b 	call	0x1692	; 0x1692 <__udivmodsi4>
     d0c:	04 c0       	rjmp	.+8      	; 0xd16 <eMBRTUInit+0x54>
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
        {
            usTimerT35_50us = 35;       /* 1800us. */
     d0e:	23 e2       	ldi	r18, 0x23	; 35
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	40 e0       	ldi	r20, 0x00	; 0
     d14:	50 e0       	ldi	r21, 0x00	; 0
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
     d16:	c9 01       	movw	r24, r18
     d18:	0e 94 c2 04 	call	0x984	; 0x984 <xMBPortTimersInit>
     d1c:	81 30       	cpi	r24, 0x01	; 1
     d1e:	11 f4       	brne	.+4      	; 0xd24 <eMBRTUInit+0x62>

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	01 c0       	rjmp	.+2      	; 0xd26 <eMBRTUInit+0x64>
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
        {
            eStatus = MB_EPORTERR;
     d24:	83 e0       	ldi	r24, 0x03	; 3
        }
    }
    EXIT_CRITICAL_SECTION(  );
     d26:	78 94       	sei

    return eStatus;
}
     d28:	0f 91       	pop	r16
     d2a:	ff 90       	pop	r15
     d2c:	ef 90       	pop	r14
     d2e:	df 90       	pop	r13
     d30:	cf 90       	pop	r12
     d32:	08 95       	ret

00000d34 <eMBRTUStart>:

void
eMBRTUStart( void )
{
    ENTER_CRITICAL_SECTION(  );
     d34:	f8 94       	cli
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
     d36:	10 92 2b 01 	sts	0x012B, r1
    vMBPortSerialEnable( TRUE, FALSE );
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	60 e0       	ldi	r22, 0x00	; 0
     d3e:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
     d42:	0e 94 a7 04 	call	0x94e	; 0x94e <vMBPortTimersEnable>

    EXIT_CRITICAL_SECTION(  );
     d46:	78 94       	sei
}
     d48:	08 95       	ret

00000d4a <eMBRTUStop>:

void
eMBRTUStop( void )
{
    ENTER_CRITICAL_SECTION(  );
     d4a:	f8 94       	cli
    vMBPortSerialEnable( FALSE, FALSE );
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
     d54:	0e 94 b8 04 	call	0x970	; 0x970 <vMBPortTimersDisable>
    EXIT_CRITICAL_SECTION(  );
     d58:	78 94       	sei
}
     d5a:	08 95       	ret

00000d5c <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
     d5c:	ef 92       	push	r14
     d5e:	ff 92       	push	r15
     d60:	0f 93       	push	r16
     d62:	1f 93       	push	r17
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	8c 01       	movw	r16, r24
     d6a:	7b 01       	movw	r14, r22
     d6c:	ea 01       	movw	r28, r20
    BOOL            xFrameReceived = FALSE;
    eMBErrorCode    eStatus = MB_ENOERR;

    ENTER_CRITICAL_SECTION(  );
     d6e:	f8 94       	cli
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
     d70:	80 91 31 01 	lds	r24, 0x0131
     d74:	90 91 32 01 	lds	r25, 0x0132
     d78:	84 30       	cpi	r24, 0x04	; 4
     d7a:	91 05       	cpc	r25, r1
     d7c:	e0 f0       	brcs	.+56     	; 0xdb6 <eMBRTUReceive+0x5a>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
     d7e:	60 91 31 01 	lds	r22, 0x0131
     d82:	70 91 32 01 	lds	r23, 0x0132
     d86:	8f e5       	ldi	r24, 0x5F	; 95
     d88:	91 e0       	ldi	r25, 0x01	; 1
     d8a:	0e 94 c1 03 	call	0x782	; 0x782 <usMBCRC16>
     d8e:	00 97       	sbiw	r24, 0x00	; 0
     d90:	91 f4       	brne	.+36     	; 0xdb6 <eMBRTUReceive+0x5a>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
     d92:	80 91 5f 01 	lds	r24, 0x015F
     d96:	f8 01       	movw	r30, r16
     d98:	80 83       	st	Z, r24

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
     d9a:	80 91 31 01 	lds	r24, 0x0131
     d9e:	90 91 32 01 	lds	r25, 0x0132
     da2:	03 97       	sbiw	r24, 0x03	; 3
     da4:	99 83       	std	Y+1, r25	; 0x01
     da6:	88 83       	st	Y, r24

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
     da8:	80 e6       	ldi	r24, 0x60	; 96
     daa:	91 e0       	ldi	r25, 0x01	; 1
     dac:	f7 01       	movw	r30, r14
     dae:	91 83       	std	Z+1, r25	; 0x01
     db0:	80 83       	st	Z, r24

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
    BOOL            xFrameReceived = FALSE;
    eMBErrorCode    eStatus = MB_ENOERR;
     db2:	80 e0       	ldi	r24, 0x00	; 0
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
        xFrameReceived = TRUE;
     db4:	01 c0       	rjmp	.+2      	; 0xdb8 <eMBRTUReceive+0x5c>
    }
    else
    {
        eStatus = MB_EIO;
     db6:	85 e0       	ldi	r24, 0x05	; 5
    }

    EXIT_CRITICAL_SECTION(  );
     db8:	78 94       	sei
    return eStatus;
}
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	1f 91       	pop	r17
     dc0:	0f 91       	pop	r16
     dc2:	ff 90       	pop	r15
     dc4:	ef 90       	pop	r14
     dc6:	08 95       	ret

00000dc8 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
     dc8:	1f 93       	push	r17
    eMBErrorCode    eStatus = MB_ENOERR;
    USHORT          usCRC16;

    ENTER_CRITICAL_SECTION(  );
     dca:	f8 94       	cli

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
     dcc:	10 91 2b 01 	lds	r17, 0x012B
     dd0:	11 30       	cpi	r17, 0x01	; 1
     dd2:	09 f0       	breq	.+2      	; 0xdd6 <eMBRTUSend+0xe>
     dd4:	42 c0       	rjmp	.+132    	; 0xe5a <eMBRTUSend+0x92>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
     dd6:	fb 01       	movw	r30, r22
     dd8:	31 97       	sbiw	r30, 0x01	; 1
     dda:	f0 93 30 01 	sts	0x0130, r31
     dde:	e0 93 2f 01 	sts	0x012F, r30
        usSndBufferCount = 1;
     de2:	21 e0       	ldi	r18, 0x01	; 1
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	30 93 2e 01 	sts	0x012E, r19
     dea:	20 93 2d 01 	sts	0x012D, r18

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
     dee:	80 83       	st	Z, r24
        usSndBufferCount += usLength;
     df0:	80 91 2d 01 	lds	r24, 0x012D
     df4:	90 91 2e 01 	lds	r25, 0x012E
     df8:	84 0f       	add	r24, r20
     dfa:	95 1f       	adc	r25, r21
     dfc:	90 93 2e 01 	sts	0x012E, r25
     e00:	80 93 2d 01 	sts	0x012D, r24

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
     e04:	60 91 2d 01 	lds	r22, 0x012D
     e08:	70 91 2e 01 	lds	r23, 0x012E
     e0c:	cf 01       	movw	r24, r30
     e0e:	0e 94 c1 03 	call	0x782	; 0x782 <usMBCRC16>
     e12:	49 2f       	mov	r20, r25
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
     e14:	20 91 2d 01 	lds	r18, 0x012D
     e18:	30 91 2e 01 	lds	r19, 0x012E
     e1c:	f9 01       	movw	r30, r18
     e1e:	e1 5a       	subi	r30, 0xA1	; 161
     e20:	fe 4f       	sbci	r31, 0xFE	; 254
     e22:	80 83       	st	Z, r24
     e24:	2f 5f       	subi	r18, 0xFF	; 255
     e26:	3f 4f       	sbci	r19, 0xFF	; 255
     e28:	30 93 2e 01 	sts	0x012E, r19
     e2c:	20 93 2d 01 	sts	0x012D, r18
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
     e30:	80 91 2d 01 	lds	r24, 0x012D
     e34:	90 91 2e 01 	lds	r25, 0x012E
     e38:	fc 01       	movw	r30, r24
     e3a:	e1 5a       	subi	r30, 0xA1	; 161
     e3c:	fe 4f       	sbci	r31, 0xFE	; 254
     e3e:	40 83       	st	Z, r20
     e40:	01 96       	adiw	r24, 0x01	; 1
     e42:	90 93 2e 01 	sts	0x012E, r25
     e46:	80 93 2d 01 	sts	0x012D, r24

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
     e4a:	10 93 2c 01 	sts	0x012C, r17
        vMBPortSerialEnable( FALSE, TRUE );
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	61 e0       	ldi	r22, 0x01	; 1
     e52:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <vMBPortSerialEnable>
}

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
    eMBErrorCode    eStatus = MB_ENOERR;
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	01 c0       	rjmp	.+2      	; 0xe5c <eMBRTUSend+0x94>
        eSndState = STATE_TX_XMIT;
        vMBPortSerialEnable( FALSE, TRUE );
    }
    else
    {
        eStatus = MB_EIO;
     e5a:	85 e0       	ldi	r24, 0x05	; 5
    }
    EXIT_CRITICAL_SECTION(  );
     e5c:	78 94       	sei
    return eStatus;
}
     e5e:	1f 91       	pop	r17
     e60:	08 95       	ret

00000e62 <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	0f 92       	push	r0
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
     e6c:	ce 01       	movw	r24, r28
     e6e:	01 96       	adiw	r24, 0x01	; 1
     e70:	0e 94 49 04 	call	0x892	; 0x892 <xMBPortSerialGetByte>

    switch ( eRcvState )
     e74:	80 91 2b 01 	lds	r24, 0x012B
     e78:	81 30       	cpi	r24, 0x01	; 1
     e7a:	39 f0       	breq	.+14     	; 0xe8a <xMBRTUReceiveFSM+0x28>
     e7c:	81 30       	cpi	r24, 0x01	; 1
     e7e:	98 f1       	brcs	.+102    	; 0xee6 <xMBRTUReceiveFSM+0x84>
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	b9 f0       	breq	.+46     	; 0xeb2 <xMBRTUReceiveFSM+0x50>
     e84:	83 30       	cpi	r24, 0x03	; 3
     e86:	89 f5       	brne	.+98     	; 0xeea <xMBRTUReceiveFSM+0x88>
     e88:	2e c0       	rjmp	.+92     	; 0xee6 <xMBRTUReceiveFSM+0x84>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
     e8a:	10 92 32 01 	sts	0x0132, r1
     e8e:	10 92 31 01 	sts	0x0131, r1
        ucRTUBuf[usRcvBufferPos++] = ucByte;
     e92:	80 91 31 01 	lds	r24, 0x0131
     e96:	90 91 32 01 	lds	r25, 0x0132
     e9a:	29 81       	ldd	r18, Y+1	; 0x01
     e9c:	fc 01       	movw	r30, r24
     e9e:	e1 5a       	subi	r30, 0xA1	; 161
     ea0:	fe 4f       	sbci	r31, 0xFE	; 254
     ea2:	20 83       	st	Z, r18
     ea4:	01 96       	adiw	r24, 0x01	; 1
     ea6:	90 93 32 01 	sts	0x0132, r25
     eaa:	80 93 31 01 	sts	0x0131, r24
        eRcvState = STATE_RX_RCV;
     eae:	82 e0       	ldi	r24, 0x02	; 2
     eb0:	18 c0       	rjmp	.+48     	; 0xee2 <xMBRTUReceiveFSM+0x80>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
     eb2:	80 91 31 01 	lds	r24, 0x0131
     eb6:	90 91 32 01 	lds	r25, 0x0132
     eba:	8f 3f       	cpi	r24, 0xFF	; 255
     ebc:	91 05       	cpc	r25, r1
     ebe:	09 f0       	breq	.+2      	; 0xec2 <xMBRTUReceiveFSM+0x60>
     ec0:	78 f4       	brcc	.+30     	; 0xee0 <xMBRTUReceiveFSM+0x7e>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
     ec2:	80 91 31 01 	lds	r24, 0x0131
     ec6:	90 91 32 01 	lds	r25, 0x0132
     eca:	29 81       	ldd	r18, Y+1	; 0x01
     ecc:	fc 01       	movw	r30, r24
     ece:	e1 5a       	subi	r30, 0xA1	; 161
     ed0:	fe 4f       	sbci	r31, 0xFE	; 254
     ed2:	20 83       	st	Z, r18
     ed4:	01 96       	adiw	r24, 0x01	; 1
     ed6:	90 93 32 01 	sts	0x0132, r25
     eda:	80 93 31 01 	sts	0x0131, r24
     ede:	03 c0       	rjmp	.+6      	; 0xee6 <xMBRTUReceiveFSM+0x84>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
     ee0:	83 e0       	ldi	r24, 0x03	; 3
     ee2:	80 93 2b 01 	sts	0x012B, r24
        }
        vMBPortTimersEnable(  );
     ee6:	0e 94 a7 04 	call	0x94e	; 0x94e <vMBPortTimersEnable>
        break;
    }
    return xTaskNeedSwitch;
}
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	0f 90       	pop	r0
     eee:	cf 91       	pop	r28
     ef0:	df 91       	pop	r29
     ef2:	08 95       	ret

00000ef4 <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
     ef4:	1f 93       	push	r17
    BOOL            xNeedPoll = FALSE;

    assert( eRcvState == STATE_RX_IDLE );

    switch ( eSndState )
     ef6:	80 91 2c 01 	lds	r24, 0x012C
     efa:	88 23       	and	r24, r24
     efc:	19 f0       	breq	.+6      	; 0xf04 <xMBRTUTransmitFSM+0x10>
     efe:	81 30       	cpi	r24, 0x01	; 1
     f00:	89 f5       	brne	.+98     	; 0xf64 <xMBRTUTransmitFSM+0x70>
     f02:	05 c0       	rjmp	.+10     	; 0xf0e <xMBRTUTransmitFSM+0x1a>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	60 e0       	ldi	r22, 0x00	; 0
     f08:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <vMBPortSerialEnable>
     f0c:	2b c0       	rjmp	.+86     	; 0xf64 <xMBRTUTransmitFSM+0x70>
        break;

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
     f0e:	80 91 2d 01 	lds	r24, 0x012D
     f12:	90 91 2e 01 	lds	r25, 0x012E
     f16:	00 97       	sbiw	r24, 0x00	; 0
     f18:	d1 f0       	breq	.+52     	; 0xf4e <xMBRTUTransmitFSM+0x5a>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
     f1a:	e0 91 2f 01 	lds	r30, 0x012F
     f1e:	f0 91 30 01 	lds	r31, 0x0130
     f22:	80 81       	ld	r24, Z
     f24:	0e 94 46 04 	call	0x88c	; 0x88c <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
     f28:	80 91 2f 01 	lds	r24, 0x012F
     f2c:	90 91 30 01 	lds	r25, 0x0130
     f30:	01 96       	adiw	r24, 0x01	; 1
     f32:	90 93 30 01 	sts	0x0130, r25
     f36:	80 93 2f 01 	sts	0x012F, r24
            usSndBufferCount--;
     f3a:	80 91 2d 01 	lds	r24, 0x012D
     f3e:	90 91 2e 01 	lds	r25, 0x012E
     f42:	01 97       	sbiw	r24, 0x01	; 1
     f44:	90 93 2e 01 	sts	0x012E, r25
     f48:	80 93 2d 01 	sts	0x012D, r24
     f4c:	0b c0       	rjmp	.+22     	; 0xf64 <xMBRTUTransmitFSM+0x70>
        }
        else
        {
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
     f4e:	83 e0       	ldi	r24, 0x03	; 3
     f50:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <xMBPortEventPost>
     f54:	18 2f       	mov	r17, r24
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	60 e0       	ldi	r22, 0x00	; 0
     f5a:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
     f5e:	10 92 2c 01 	sts	0x012C, r1
     f62:	01 c0       	rjmp	.+2      	; 0xf66 <xMBRTUTransmitFSM+0x72>
}

BOOL
xMBRTUTransmitFSM( void )
{
    BOOL            xNeedPoll = FALSE;
     f64:	10 e0       	ldi	r17, 0x00	; 0
        }
        break;
    }

    return xNeedPoll;
}
     f66:	81 2f       	mov	r24, r17
     f68:	1f 91       	pop	r17
     f6a:	08 95       	ret

00000f6c <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	0f 92       	push	r0
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
    BOOL            xNeedPoll = FALSE;

    switch ( eRcvState )
     f76:	80 91 2b 01 	lds	r24, 0x012B
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <xMBRTUTimerT35Expired+0x18>
     f7e:	82 30       	cpi	r24, 0x02	; 2
     f80:	39 f4       	brne	.+14     	; 0xf90 <xMBRTUTimerT35Expired+0x24>
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <xMBRTUTimerT35Expired+0x1c>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPost( EV_READY );
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	01 c0       	rjmp	.+2      	; 0xf8a <xMBRTUTimerT35Expired+0x1e>
        break;

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <xMBPortEventPost>
        break;
     f8e:	01 c0       	rjmp	.+2      	; 0xf92 <xMBRTUTimerT35Expired+0x26>
}

BOOL
xMBRTUTimerT35Expired( void )
{
    BOOL            xNeedPoll = FALSE;
     f90:	80 e0       	ldi	r24, 0x00	; 0
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
     f92:	89 83       	std	Y+1, r24	; 0x01
     f94:	0e 94 b8 04 	call	0x970	; 0x970 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
     f98:	91 e0       	ldi	r25, 0x01	; 1
     f9a:	90 93 2b 01 	sts	0x012B, r25

    return xNeedPoll;
}
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	0f 90       	pop	r0
     fa2:	cf 91       	pop	r28
     fa4:	df 91       	pop	r29
     fa6:	08 95       	ret

00000fa8 <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
     fa8:	0f 93       	push	r16
     faa:	1f 93       	push	r17
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	fc 01       	movw	r30, r24
     fb2:	eb 01       	movw	r28, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
     fb4:	88 81       	ld	r24, Y
     fb6:	99 81       	ldd	r25, Y+1	; 0x01
     fb8:	85 30       	cpi	r24, 0x05	; 5
     fba:	91 05       	cpc	r25, r1
     fbc:	e9 f5       	brne	.+122    	; 0x1038 <eMBFuncReadInputRegister+0x90>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
     fbe:	cf 01       	movw	r24, r30
     fc0:	01 96       	adiw	r24, 0x01	; 1
     fc2:	41 81       	ldd	r20, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
     fc4:	62 81       	ldd	r22, Z+2	; 0x02
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
     fc6:	33 81       	ldd	r19, Z+3	; 0x03
     fc8:	20 e0       	ldi	r18, 0x00	; 0
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
     fca:	04 81       	ldd	r16, Z+4	; 0x04
     fcc:	10 e0       	ldi	r17, 0x00	; 0
     fce:	02 2b       	or	r16, r18
     fd0:	13 2b       	or	r17, r19

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
     fd2:	98 01       	movw	r18, r16
     fd4:	21 50       	subi	r18, 0x01	; 1
     fd6:	30 40       	sbci	r19, 0x00	; 0
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
     fd8:	2c 37       	cpi	r18, 0x7C	; 124
     fda:	31 05       	cpc	r19, r1
     fdc:	68 f5       	brcc	.+90     	; 0x1038 <eMBFuncReadInputRegister+0x90>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
     fde:	19 82       	std	Y+1, r1	; 0x01
     fe0:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
     fe2:	24 e0       	ldi	r18, 0x04	; 4
     fe4:	20 83       	st	Z, r18
            *usLen += 1;
     fe6:	28 81       	ld	r18, Y
     fe8:	39 81       	ldd	r19, Y+1	; 0x01
     fea:	2f 5f       	subi	r18, 0xFF	; 255
     fec:	3f 4f       	sbci	r19, 0xFF	; 255
     fee:	39 83       	std	Y+1, r19	; 0x01
     ff0:	28 83       	st	Y, r18

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
     ff2:	20 2f       	mov	r18, r16
     ff4:	22 0f       	add	r18, r18
     ff6:	21 83       	std	Z+1, r18	; 0x01
            *usLen += 1;
     ff8:	28 81       	ld	r18, Y
     ffa:	39 81       	ldd	r19, Y+1	; 0x01
     ffc:	2f 5f       	subi	r18, 0xFF	; 255
     ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    1000:	39 83       	std	Y+1, r19	; 0x01
    1002:	28 83       	st	Y, r18
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    1004:	34 2f       	mov	r19, r20
    1006:	20 e0       	ldi	r18, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    1008:	70 e0       	ldi	r23, 0x00	; 0
    100a:	62 2b       	or	r22, r18
    100c:	73 2b       	or	r23, r19
        usRegAddress++;
    100e:	6f 5f       	subi	r22, 0xFF	; 255
    1010:	7f 4f       	sbci	r23, 0xFF	; 255

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
            *usLen += 1;

            eRegStatus =
    1012:	01 96       	adiw	r24, 0x01	; 1
    1014:	a8 01       	movw	r20, r16
    1016:	0e 94 36 03 	call	0x66c	; 0x66c <eMBRegInputCB>
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    101a:	88 23       	and	r24, r24
    101c:	19 f0       	breq	.+6      	; 0x1024 <eMBFuncReadInputRegister+0x7c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    101e:	0e 94 a8 09 	call	0x1350	; 0x1350 <prveMBError2Exception>
    1022:	0b c0       	rjmp	.+22     	; 0x103a <eMBFuncReadInputRegister+0x92>
            }
            else
            {
                *usLen += usRegCount * 2;
    1024:	00 0f       	add	r16, r16
    1026:	11 1f       	adc	r17, r17
    1028:	88 81       	ld	r24, Y
    102a:	99 81       	ldd	r25, Y+1	; 0x01
    102c:	80 0f       	add	r24, r16
    102e:	91 1f       	adc	r25, r17
    1030:	99 83       	std	Y+1, r25	; 0x01
    1032:	88 83       	st	Y, r24
{
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	01 c0       	rjmp	.+2      	; 0x103a <eMBFuncReadInputRegister+0x92>
                *usLen += usRegCount * 2;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    1038:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	1f 91       	pop	r17
    1040:	0f 91       	pop	r16
    1042:	08 95       	ret

00001044 <eMBFuncWriteHoldingRegister>:
{
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    1044:	fb 01       	movw	r30, r22
    1046:	20 81       	ld	r18, Z
    1048:	31 81       	ldd	r19, Z+1	; 0x01
    104a:	25 30       	cpi	r18, 0x05	; 5
    104c:	31 05       	cpc	r19, r1
    104e:	a1 f4       	brne	.+40     	; 0x1078 <eMBFuncWriteHoldingRegister+0x34>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
    1050:	fc 01       	movw	r30, r24
    1052:	31 81       	ldd	r19, Z+1	; 0x01
    1054:	20 e0       	ldi	r18, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
    1056:	62 81       	ldd	r22, Z+2	; 0x02
    1058:	70 e0       	ldi	r23, 0x00	; 0
    105a:	62 2b       	or	r22, r18
    105c:	73 2b       	or	r23, r19
        usRegAddress++;
    105e:	6f 5f       	subi	r22, 0xFF	; 255
    1060:	7f 4f       	sbci	r23, 0xFF	; 255

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
    1062:	03 96       	adiw	r24, 0x03	; 3
    1064:	41 e0       	ldi	r20, 0x01	; 1
    1066:	50 e0       	ldi	r21, 0x00	; 0
    1068:	21 e0       	ldi	r18, 0x01	; 1
    106a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <eMBRegHoldingCB>
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
    106e:	88 23       	and	r24, r24
    1070:	29 f0       	breq	.+10     	; 0x107c <eMBFuncWriteHoldingRegister+0x38>
        {
            eStatus = prveMBError2Exception( eRegStatus );
    1072:	0e 94 a8 09 	call	0x1350	; 0x1350 <prveMBError2Exception>
    1076:	08 95       	ret
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    1078:	83 e0       	ldi	r24, 0x03	; 3
    107a:	08 95       	ret

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
    107c:	80 e0       	ldi	r24, 0x00	; 0
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    107e:	08 95       	ret

00001080 <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	fc 01       	movw	r30, r24
    1086:	eb 01       	movw	r28, r22
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    1088:	88 81       	ld	r24, Y
    108a:	99 81       	ldd	r25, Y+1	; 0x01
    108c:	86 30       	cpi	r24, 0x06	; 6
    108e:	91 05       	cpc	r25, r1
    1090:	48 f1       	brcs	.+82     	; 0x10e4 <eMBFuncWriteMultipleHoldingRegister+0x64>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
    1092:	21 81       	ldd	r18, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
    1094:	62 81       	ldd	r22, Z+2	; 0x02
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
    1096:	93 81       	ldd	r25, Z+3	; 0x03
    1098:	80 e0       	ldi	r24, 0x00	; 0
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
    109a:	44 81       	ldd	r20, Z+4	; 0x04
    109c:	50 e0       	ldi	r21, 0x00	; 0
    109e:	48 2b       	or	r20, r24
    10a0:	59 2b       	or	r21, r25

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
    10a2:	35 81       	ldd	r19, Z+5	; 0x05

        if( ( usRegCount >= 1 ) &&
    10a4:	ca 01       	movw	r24, r20
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	88 37       	cpi	r24, 0x78	; 120
    10aa:	91 05       	cpc	r25, r1
    10ac:	d8 f4       	brcc	.+54     	; 0x10e4 <eMBFuncWriteMultipleHoldingRegister+0x64>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
    10ae:	84 2f       	mov	r24, r20
    10b0:	88 0f       	add	r24, r24
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];

        if( ( usRegCount >= 1 ) &&
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
    10b2:	38 17       	cp	r19, r24
    10b4:	b9 f4       	brne	.+46     	; 0x10e4 <eMBFuncWriteMultipleHoldingRegister+0x64>
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
    10b6:	92 2f       	mov	r25, r18
    10b8:	80 e0       	ldi	r24, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
    10ba:	70 e0       	ldi	r23, 0x00	; 0
    10bc:	68 2b       	or	r22, r24
    10be:	79 2b       	or	r23, r25
        usRegAddress++;
    10c0:	6f 5f       	subi	r22, 0xFF	; 255
    10c2:	7f 4f       	sbci	r23, 0xFF	; 255
        if( ( usRegCount >= 1 ) &&
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
        {
            /* Make callback to update the register values. */
            eRegStatus =
    10c4:	cf 01       	movw	r24, r30
    10c6:	06 96       	adiw	r24, 0x06	; 6
    10c8:	21 e0       	ldi	r18, 0x01	; 1
    10ca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <eMBRegHoldingCB>
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    10ce:	88 23       	and	r24, r24
    10d0:	19 f0       	breq	.+6      	; 0x10d8 <eMBFuncWriteMultipleHoldingRegister+0x58>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    10d2:	0e 94 a8 09 	call	0x1350	; 0x1350 <prveMBError2Exception>
    10d6:	07 c0       	rjmp	.+14     	; 0x10e6 <eMBFuncWriteMultipleHoldingRegister+0x66>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
    10d8:	85 e0       	ldi	r24, 0x05	; 5
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	99 83       	std	Y+1, r25	; 0x01
    10de:	88 83       	st	Y, r24
{
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	01 c0       	rjmp	.+2      	; 0x10e6 <eMBFuncWriteMultipleHoldingRegister+0x66>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    10e4:	83 e0       	ldi	r24, 0x03	; 3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	08 95       	ret

000010ec <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	fc 01       	movw	r30, r24
    10f6:	eb 01       	movw	r28, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    10f8:	88 81       	ld	r24, Y
    10fa:	99 81       	ldd	r25, Y+1	; 0x01
    10fc:	85 30       	cpi	r24, 0x05	; 5
    10fe:	91 05       	cpc	r25, r1
    1100:	c9 f5       	brne	.+114    	; 0x1174 <eMBFuncReadHoldingRegister+0x88>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    1102:	cf 01       	movw	r24, r30
    1104:	01 96       	adiw	r24, 0x01	; 1
    1106:	51 81       	ldd	r21, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    1108:	62 81       	ldd	r22, Z+2	; 0x02
        usRegAddress++;

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
    110a:	44 81       	ldd	r20, Z+4	; 0x04
    110c:	04 2f       	mov	r16, r20
    110e:	10 e0       	ldi	r17, 0x00	; 0

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
    1110:	98 01       	movw	r18, r16
    1112:	21 50       	subi	r18, 0x01	; 1
    1114:	30 40       	sbci	r19, 0x00	; 0
    1116:	2d 37       	cpi	r18, 0x7D	; 125
    1118:	31 05       	cpc	r19, r1
    111a:	60 f5       	brcc	.+88     	; 0x1174 <eMBFuncReadHoldingRegister+0x88>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
    111c:	19 82       	std	Y+1, r1	; 0x01
    111e:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
    1120:	23 e0       	ldi	r18, 0x03	; 3
    1122:	20 83       	st	Z, r18
            *usLen += 1;
    1124:	28 81       	ld	r18, Y
    1126:	39 81       	ldd	r19, Y+1	; 0x01
    1128:	2f 5f       	subi	r18, 0xFF	; 255
    112a:	3f 4f       	sbci	r19, 0xFF	; 255
    112c:	39 83       	std	Y+1, r19	; 0x01
    112e:	28 83       	st	Y, r18

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
    1130:	44 0f       	add	r20, r20
    1132:	41 83       	std	Z+1, r20	; 0x01
            *usLen += 1;
    1134:	28 81       	ld	r18, Y
    1136:	39 81       	ldd	r19, Y+1	; 0x01
    1138:	2f 5f       	subi	r18, 0xFF	; 255
    113a:	3f 4f       	sbci	r19, 0xFF	; 255
    113c:	39 83       	std	Y+1, r19	; 0x01
    113e:	28 83       	st	Y, r18
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    1140:	35 2f       	mov	r19, r21
    1142:	20 e0       	ldi	r18, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    1144:	70 e0       	ldi	r23, 0x00	; 0
    1146:	62 2b       	or	r22, r18
    1148:	73 2b       	or	r23, r19
        usRegAddress++;
    114a:	6f 5f       	subi	r22, 0xFF	; 255
    114c:	7f 4f       	sbci	r23, 0xFF	; 255
            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
            *usLen += 1;

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
    114e:	01 96       	adiw	r24, 0x01	; 1
    1150:	a8 01       	movw	r20, r16
    1152:	0e 94 71 03 	call	0x6e2	; 0x6e2 <eMBRegHoldingCB>
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    1156:	88 23       	and	r24, r24
    1158:	19 f0       	breq	.+6      	; 0x1160 <eMBFuncReadHoldingRegister+0x74>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    115a:	0e 94 a8 09 	call	0x1350	; 0x1350 <prveMBError2Exception>
    115e:	0b c0       	rjmp	.+22     	; 0x1176 <eMBFuncReadHoldingRegister+0x8a>
            }
            else
            {
                *usLen += usRegCount * 2;
    1160:	00 0f       	add	r16, r16
    1162:	11 1f       	adc	r17, r17
    1164:	88 81       	ld	r24, Y
    1166:	99 81       	ldd	r25, Y+1	; 0x01
    1168:	80 0f       	add	r24, r16
    116a:	91 1f       	adc	r25, r17
    116c:	99 83       	std	Y+1, r25	; 0x01
    116e:	88 83       	st	Y, r24
{
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	01 c0       	rjmp	.+2      	; 0x1176 <eMBFuncReadHoldingRegister+0x8a>
                *usLen += usRegCount * 2;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    1174:	83 e0       	ldi	r24, 0x03	; 3
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    1176:	df 91       	pop	r29
    1178:	cf 91       	pop	r28
    117a:	1f 91       	pop	r17
    117c:	0f 91       	pop	r16
    117e:	08 95       	ret

00001180 <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
    1180:	af 92       	push	r10
    1182:	bf 92       	push	r11
    1184:	cf 92       	push	r12
    1186:	df 92       	push	r13
    1188:	ef 92       	push	r14
    118a:	ff 92       	push	r15
    118c:	0f 93       	push	r16
    118e:	1f 93       	push	r17
    1190:	cf 93       	push	r28
    1192:	df 93       	push	r29
    1194:	ec 01       	movw	r28, r24
    1196:	8b 01       	movw	r16, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    1198:	fb 01       	movw	r30, r22
    119a:	80 81       	ld	r24, Z
    119c:	91 81       	ldd	r25, Z+1	; 0x01
    119e:	8a 30       	cpi	r24, 0x0A	; 10
    11a0:	91 05       	cpc	r25, r1
    11a2:	08 f4       	brcc	.+2      	; 0x11a6 <eMBFuncReadWriteMultipleHoldingRegister+0x26>
    11a4:	6a c0       	rjmp	.+212    	; 0x127a <eMBFuncReadWriteMultipleHoldingRegister+0xfa>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
    11a6:	6e 01       	movw	r12, r28
    11a8:	08 94       	sec
    11aa:	c1 1c       	adc	r12, r1
    11ac:	d1 1c       	adc	r13, r1
    11ae:	b9 80       	ldd	r11, Y+1	; 0x01
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
    11b0:	aa 80       	ldd	r10, Y+2	; 0x02
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
    11b2:	9b 81       	ldd	r25, Y+3	; 0x03
    11b4:	80 e0       	ldi	r24, 0x00	; 0
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
    11b6:	ec 80       	ldd	r14, Y+4	; 0x04
    11b8:	ff 24       	eor	r15, r15
    11ba:	e8 2a       	or	r14, r24
    11bc:	f9 2a       	or	r15, r25

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
    11be:	7d 81       	ldd	r23, Y+5	; 0x05
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
    11c0:	6e 81       	ldd	r22, Y+6	; 0x06
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
    11c2:	9f 81       	ldd	r25, Y+7	; 0x07
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
    11c4:	48 85       	ldd	r20, Y+8	; 0x08

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
    11c6:	89 85       	ldd	r24, Y+9	; 0x09

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
    11c8:	97 01       	movw	r18, r14
    11ca:	21 50       	subi	r18, 0x01	; 1
    11cc:	30 40       	sbci	r19, 0x00	; 0
    11ce:	2d 37       	cpi	r18, 0x7D	; 125
    11d0:	31 05       	cpc	r19, r1
    11d2:	08 f0       	brcs	.+2      	; 0x11d6 <eMBFuncReadWriteMultipleHoldingRegister+0x56>
    11d4:	54 c0       	rjmp	.+168    	; 0x127e <eMBFuncReadWriteMultipleHoldingRegister+0xfe>

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
        usRegWriteAddress++;

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
    11d6:	39 2f       	mov	r19, r25
    11d8:	20 e0       	ldi	r18, 0x00	; 0
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
    11da:	50 e0       	ldi	r21, 0x00	; 0
    11dc:	42 2b       	or	r20, r18
    11de:	53 2b       	or	r21, r19

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
    11e0:	41 15       	cp	r20, r1
    11e2:	51 05       	cpc	r21, r1
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <eMBFuncReadWriteMultipleHoldingRegister+0x68>
    11e6:	4b c0       	rjmp	.+150    	; 0x127e <eMBFuncReadWriteMultipleHoldingRegister+0xfe>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
    11e8:	4a 37       	cpi	r20, 0x7A	; 122
    11ea:	51 05       	cpc	r21, r1
    11ec:	08 f0       	brcs	.+2      	; 0x11f0 <eMBFuncReadWriteMultipleHoldingRegister+0x70>
    11ee:	47 c0       	rjmp	.+142    	; 0x127e <eMBFuncReadWriteMultipleHoldingRegister+0xfe>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
    11f0:	9a 01       	movw	r18, r20
    11f2:	22 0f       	add	r18, r18
    11f4:	33 1f       	adc	r19, r19
    11f6:	90 e0       	ldi	r25, 0x00	; 0
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
    11f8:	28 17       	cp	r18, r24
    11fa:	39 07       	cpc	r19, r25
    11fc:	09 f0       	breq	.+2      	; 0x1200 <eMBFuncReadWriteMultipleHoldingRegister+0x80>
    11fe:	3f c0       	rjmp	.+126    	; 0x127e <eMBFuncReadWriteMultipleHoldingRegister+0xfe>
        usRegReadAddress++;

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
    1200:	97 2f       	mov	r25, r23
    1202:	80 e0       	ldi	r24, 0x00	; 0
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
    1204:	70 e0       	ldi	r23, 0x00	; 0
    1206:	68 2b       	or	r22, r24
    1208:	79 2b       	or	r23, r25
        usRegWriteAddress++;
    120a:	6f 5f       	subi	r22, 0xFF	; 255
    120c:	7f 4f       	sbci	r23, 0xFF	; 255
        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
    120e:	ce 01       	movw	r24, r28
    1210:	0a 96       	adiw	r24, 0x0a	; 10
    1212:	21 e0       	ldi	r18, 0x01	; 1
    1214:	0e 94 71 03 	call	0x6e2	; 0x6e2 <eMBRegHoldingCB>
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
    1218:	88 23       	and	r24, r24
    121a:	61 f5       	brne	.+88     	; 0x1274 <eMBFuncReadWriteMultipleHoldingRegister+0xf4>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
                *usLen = MB_PDU_FUNC_OFF;
    121c:	f8 01       	movw	r30, r16
    121e:	11 82       	std	Z+1, r1	; 0x01
    1220:	10 82       	st	Z, r1

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
    1222:	87 e1       	ldi	r24, 0x17	; 23
    1224:	88 83       	st	Y, r24
                *usLen += 1;
    1226:	80 81       	ld	r24, Z
    1228:	91 81       	ldd	r25, Z+1	; 0x01
    122a:	01 96       	adiw	r24, 0x01	; 1
    122c:	91 83       	std	Z+1, r25	; 0x01
    122e:	80 83       	st	Z, r24

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
    1230:	8e 2d       	mov	r24, r14
    1232:	88 0f       	add	r24, r24
    1234:	89 83       	std	Y+1, r24	; 0x01
                *usLen += 1;
    1236:	80 81       	ld	r24, Z
    1238:	91 81       	ldd	r25, Z+1	; 0x01
    123a:	01 96       	adiw	r24, 0x01	; 1
    123c:	91 83       	std	Z+1, r25	; 0x01
    123e:	80 83       	st	Z, r24
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
    1240:	9b 2d       	mov	r25, r11
    1242:	80 e0       	ldi	r24, 0x00	; 0
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
    1244:	6a 2d       	mov	r22, r10
    1246:	70 e0       	ldi	r23, 0x00	; 0
    1248:	68 2b       	or	r22, r24
    124a:	79 2b       	or	r23, r25
        usRegReadAddress++;
    124c:	6f 5f       	subi	r22, 0xFF	; 255
    124e:	7f 4f       	sbci	r23, 0xFF	; 255
                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
                *usLen += 1;

                /* Make the read callback. */
                eRegStatus =
    1250:	c6 01       	movw	r24, r12
    1252:	01 96       	adiw	r24, 0x01	; 1
    1254:	a7 01       	movw	r20, r14
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	0e 94 71 03 	call	0x6e2	; 0x6e2 <eMBRegHoldingCB>
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
                if( eRegStatus == MB_ENOERR )
    125c:	88 23       	and	r24, r24
    125e:	51 f4       	brne	.+20     	; 0x1274 <eMBFuncReadWriteMultipleHoldingRegister+0xf4>
                {
                    *usLen += 2 * usRegReadCount;
    1260:	ee 0c       	add	r14, r14
    1262:	ff 1c       	adc	r15, r15
    1264:	f8 01       	movw	r30, r16
    1266:	80 81       	ld	r24, Z
    1268:	91 81       	ldd	r25, Z+1	; 0x01
    126a:	8e 0d       	add	r24, r14
    126c:	9f 1d       	adc	r25, r15
    126e:	91 83       	std	Z+1, r25	; 0x01
    1270:	80 83       	st	Z, r24
    1272:	03 c0       	rjmp	.+6      	; 0x127a <eMBFuncReadWriteMultipleHoldingRegister+0xfa>
                }
            }
            if( eRegStatus != MB_ENOERR )
            {
                eStatus = prveMBError2Exception( eRegStatus );
    1274:	0e 94 a8 09 	call	0x1350	; 0x1350 <prveMBError2Exception>
    1278:	03 c0       	rjmp	.+6      	; 0x1280 <eMBFuncReadWriteMultipleHoldingRegister+0x100>
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	01 c0       	rjmp	.+2      	; 0x1280 <eMBFuncReadWriteMultipleHoldingRegister+0x100>
                eStatus = prveMBError2Exception( eRegStatus );
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    127e:	83 e0       	ldi	r24, 0x03	; 3
        }
    }
    return eStatus;
}
    1280:	df 91       	pop	r29
    1282:	cf 91       	pop	r28
    1284:	1f 91       	pop	r17
    1286:	0f 91       	pop	r16
    1288:	ff 90       	pop	r15
    128a:	ef 90       	pop	r14
    128c:	df 90       	pop	r13
    128e:	cf 90       	pop	r12
    1290:	bf 90       	pop	r11
    1292:	af 90       	pop	r10
    1294:	08 95       	ret

00001296 <xMBUtilSetBits>:

/* ----------------------- Start implementation -----------------------------*/
void
xMBUtilSetBits( UCHAR * ucByteBuf, USHORT usBitOffset, UCHAR ucNBits,
                UCHAR ucValue )
{
    1296:	cf 93       	push	r28
    1298:	df 93       	push	r29
    USHORT          usWordBuf;
    USHORT          usMask;
    USHORT          usByteOffset;
    USHORT          usNPreBits;
    USHORT          usValue = ucValue;
    129a:	30 e0       	ldi	r19, 0x00	; 0
    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
    129c:	eb 01       	movw	r28, r22
    129e:	53 e0       	ldi	r21, 0x03	; 3
    12a0:	d6 95       	lsr	r29
    12a2:	c7 95       	ror	r28
    12a4:	5a 95       	dec	r21
    12a6:	e1 f7       	brne	.-8      	; 0x12a0 <xMBUtilSetBits+0xa>
    12a8:	67 70       	andi	r22, 0x07	; 7
    12aa:	70 70       	andi	r23, 0x00	; 0

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
    12ac:	e1 e0       	ldi	r30, 0x01	; 1
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <xMBUtilSetBits+0x20>
    12b2:	ee 0f       	add	r30, r30
    12b4:	ff 1f       	adc	r31, r31
    12b6:	4a 95       	dec	r20
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <xMBUtilSetBits+0x1c>
    12ba:	31 97       	sbiw	r30, 0x01	; 1
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    12bc:	dc 01       	movw	r26, r24
    12be:	ac 0f       	add	r26, r28
    12c0:	bd 1f       	adc	r27, r29
    12c2:	4c 91       	ld	r20, X
    12c4:	50 e0       	ldi	r21, 0x00	; 0
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
    12c6:	21 96       	adiw	r28, 0x01	; 1
    12c8:	c8 0f       	add	r28, r24
    12ca:	d9 1f       	adc	r29, r25
    12cc:	98 81       	ld	r25, Y
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	48 2b       	or	r20, r24
    12d2:	59 2b       	or	r21, r25
    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
    usMask <<= usBitOffset - usByteOffset * BITS_UCHAR;
    12d4:	06 2e       	mov	r0, r22
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <xMBUtilSetBits+0x46>
    12d8:	ee 0f       	add	r30, r30
    12da:	ff 1f       	adc	r31, r31
    12dc:	0a 94       	dec	r0
    12de:	e2 f7       	brpl	.-8      	; 0x12d8 <xMBUtilSetBits+0x42>
    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
    12e0:	e0 95       	com	r30
    12e2:	f0 95       	com	r31
    12e4:	4e 23       	and	r20, r30
    12e6:	5f 23       	and	r21, r31

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Move bit field into position over bits to set */
    usValue <<= usNPreBits;
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <xMBUtilSetBits+0x58>
    12ea:	22 0f       	add	r18, r18
    12ec:	33 1f       	adc	r19, r19
    12ee:	6a 95       	dec	r22
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <xMBUtilSetBits+0x54>
    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;

    /* Zero out bit field bits and then or value bits into them. */
    usWordBuf = ( USHORT )( ( usWordBuf & ( ~usMask ) ) | usValue );
    12f2:	42 2b       	or	r20, r18
    12f4:	53 2b       	or	r21, r19

    /* move bits back into storage */
    ucByteBuf[usByteOffset] = ( UCHAR )( usWordBuf & 0xFF );
    12f6:	4c 93       	st	X, r20
    ucByteBuf[usByteOffset + 1] = ( UCHAR )( usWordBuf >> BITS_UCHAR );
    12f8:	58 83       	st	Y, r21
}
    12fa:	df 91       	pop	r29
    12fc:	cf 91       	pop	r28
    12fe:	08 95       	ret

00001300 <xMBUtilGetBits>:
    USHORT          usByteOffset;
    USHORT          usNPreBits;

    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );
    1300:	9b 01       	movw	r18, r22
    1302:	f3 e0       	ldi	r31, 0x03	; 3
    1304:	36 95       	lsr	r19
    1306:	27 95       	ror	r18
    1308:	fa 95       	dec	r31
    130a:	e1 f7       	brne	.-8      	; 0x1304 <xMBUtilGetBits+0x4>

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );

    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    130c:	dc 01       	movw	r26, r24
    130e:	a2 0f       	add	r26, r18
    1310:	b3 1f       	adc	r27, r19
    1312:	8c 91       	ld	r24, X
    1314:	90 e0       	ldi	r25, 0x00	; 0
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;
    1316:	11 96       	adiw	r26, 0x01	; 1
    1318:	fc 91       	ld	r31, X
    131a:	11 97       	sbiw	r26, 0x01	; 1
    131c:	e0 e0       	ldi	r30, 0x00	; 0
    131e:	8e 2b       	or	r24, r30
    1320:	9f 2b       	or	r25, r31
    /* Calculate byte offset for first byte containing the bit values starting
     * at usBitOffset. */
    usByteOffset = ( USHORT )( ( usBitOffset ) / BITS_UCHAR );

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );
    1322:	e3 e0       	ldi	r30, 0x03	; 3
    1324:	22 0f       	add	r18, r18
    1326:	33 1f       	adc	r19, r19
    1328:	ea 95       	dec	r30
    132a:	e1 f7       	brne	.-8      	; 0x1324 <xMBUtilGetBits+0x24>
    132c:	62 1b       	sub	r22, r18
    132e:	73 0b       	sbc	r23, r19
    /* copy bits into temporary storage. */
    usWordBuf = ucByteBuf[usByteOffset];
    usWordBuf |= ucByteBuf[usByteOffset + 1] << BITS_UCHAR;

    /* throw away unneeded bits. */
    usWordBuf >>= usNPreBits;
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <xMBUtilGetBits+0x36>
    1332:	96 95       	lsr	r25
    1334:	87 95       	ror	r24
    1336:	6a 95       	dec	r22
    1338:	e2 f7       	brpl	.-8      	; 0x1332 <xMBUtilGetBits+0x32>

    /* How many bits precede our bits to set. */
    usNPreBits = ( USHORT )( usBitOffset - usByteOffset * BITS_UCHAR );

    /* Prepare a mask for setting the new bits. */
    usMask = ( USHORT )( ( 1 << ( USHORT ) ucNBits ) - 1 );
    133a:	21 e0       	ldi	r18, 0x01	; 1
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <xMBUtilGetBits+0x44>
    1340:	22 0f       	add	r18, r18
    1342:	33 1f       	adc	r19, r19
    1344:	4a 95       	dec	r20
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <xMBUtilGetBits+0x40>
    1348:	21 50       	subi	r18, 0x01	; 1
    134a:	30 40       	sbci	r19, 0x00	; 0

    /* mask away bits above the requested bitfield. */
    usWordBuf &= usMask;

    return ( UCHAR ) usWordBuf;
}
    134c:	82 23       	and	r24, r18
    134e:	08 95       	ret

00001350 <prveMBError2Exception>:

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
    1350:	88 30       	cpi	r24, 0x08	; 8
    1352:	30 f4       	brcc	.+12     	; 0x1360 <prveMBError2Exception+0x10>
    1354:	e8 2f       	mov	r30, r24
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	e6 56       	subi	r30, 0x66	; 102
    135a:	ff 4f       	sbci	r31, 0xFF	; 255
    135c:	80 81       	ld	r24, Z
    135e:	08 95       	ret
    1360:	84 e0       	ldi	r24, 0x04	; 4
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
            break;
    }

    return eStatus;
}
    1362:	08 95       	ret

00001364 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
    1364:	1f 93       	push	r17
    1366:	cf 93       	push	r28
    1368:	df 93       	push	r29
    136a:	fc 01       	movw	r30, r24
    136c:	eb 01       	movw	r28, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    136e:	88 81       	ld	r24, Y
    1370:	99 81       	ldd	r25, Y+1	; 0x01
    1372:	85 30       	cpi	r24, 0x05	; 5
    1374:	91 05       	cpc	r25, r1
    1376:	09 f0       	breq	.+2      	; 0x137a <eMBFuncReadCoils+0x16>
    1378:	48 c0       	rjmp	.+144    	; 0x140a <eMBFuncReadCoils+0xa6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    137a:	cf 01       	movw	r24, r30
    137c:	01 96       	adiw	r24, 0x01	; 1
    137e:	71 81       	ldd	r23, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    1380:	62 81       	ldd	r22, Z+2	; 0x02
        usRegAddress++;

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
    1382:	33 81       	ldd	r19, Z+3	; 0x03
    1384:	20 e0       	ldi	r18, 0x00	; 0
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
    1386:	44 81       	ldd	r20, Z+4	; 0x04
    1388:	50 e0       	ldi	r21, 0x00	; 0
    138a:	42 2b       	or	r20, r18
    138c:	53 2b       	or	r21, r19

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
    138e:	9a 01       	movw	r18, r20
    1390:	21 50       	subi	r18, 0x01	; 1
    1392:	30 40       	sbci	r19, 0x00	; 0
    1394:	a7 e0       	ldi	r26, 0x07	; 7
    1396:	2f 3c       	cpi	r18, 0xCF	; 207
    1398:	3a 07       	cpc	r19, r26
    139a:	b8 f5       	brcc	.+110    	; 0x140a <eMBFuncReadCoils+0xa6>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
    139c:	19 82       	std	Y+1, r1	; 0x01
    139e:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
    13a0:	21 e0       	ldi	r18, 0x01	; 1
    13a2:	20 83       	st	Z, r18
            *usLen += 1;
    13a4:	28 81       	ld	r18, Y
    13a6:	39 81       	ldd	r19, Y+1	; 0x01
    13a8:	2f 5f       	subi	r18, 0xFF	; 255
    13aa:	3f 4f       	sbci	r19, 0xFF	; 255
    13ac:	39 83       	std	Y+1, r19	; 0x01
    13ae:	28 83       	st	Y, r18

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
    13b0:	da 01       	movw	r26, r20
    13b2:	a7 70       	andi	r26, 0x07	; 7
    13b4:	b0 70       	andi	r27, 0x00	; 0
    13b6:	9a 01       	movw	r18, r20
    13b8:	13 e0       	ldi	r17, 0x03	; 3
    13ba:	36 95       	lsr	r19
    13bc:	27 95       	ror	r18
    13be:	1a 95       	dec	r17
    13c0:	e1 f7       	brne	.-8      	; 0x13ba <eMBFuncReadCoils+0x56>
    13c2:	10 97       	sbiw	r26, 0x00	; 0
    13c4:	19 f0       	breq	.+6      	; 0x13cc <eMBFuncReadCoils+0x68>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
    13c6:	12 2f       	mov	r17, r18
    13c8:	1f 5f       	subi	r17, 0xFF	; 255
    13ca:	01 c0       	rjmp	.+2      	; 0x13ce <eMBFuncReadCoils+0x6a>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
    13cc:	12 2f       	mov	r17, r18
            }
            *pucFrameCur++ = ucNBytes;
    13ce:	11 83       	std	Z+1, r17	; 0x01
            *usLen += 1;
    13d0:	28 81       	ld	r18, Y
    13d2:	39 81       	ldd	r19, Y+1	; 0x01
    13d4:	2f 5f       	subi	r18, 0xFF	; 255
    13d6:	3f 4f       	sbci	r19, 0xFF	; 255
    13d8:	39 83       	std	Y+1, r19	; 0x01
    13da:	28 83       	st	Y, r18
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    13dc:	37 2f       	mov	r19, r23
    13de:	20 e0       	ldi	r18, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    13e0:	70 e0       	ldi	r23, 0x00	; 0
    13e2:	62 2b       	or	r22, r18
    13e4:	73 2b       	or	r23, r19
        usRegAddress++;
    13e6:	6f 5f       	subi	r22, 0xFF	; 255
    13e8:	7f 4f       	sbci	r23, 0xFF	; 255
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
            }
            *pucFrameCur++ = ucNBytes;
            *usLen += 1;

            eRegStatus =
    13ea:	01 96       	adiw	r24, 0x01	; 1
    13ec:	0e 94 bd 03 	call	0x77a	; 0x77a <eMBRegCoilsCB>
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    13f0:	88 23       	and	r24, r24
    13f2:	19 f0       	breq	.+6      	; 0x13fa <eMBFuncReadCoils+0x96>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    13f4:	0e 94 a8 09 	call	0x1350	; 0x1350 <prveMBError2Exception>
    13f8:	09 c0       	rjmp	.+18     	; 0x140c <eMBFuncReadCoils+0xa8>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
    13fa:	88 81       	ld	r24, Y
    13fc:	99 81       	ldd	r25, Y+1	; 0x01
    13fe:	81 0f       	add	r24, r17
    1400:	91 1d       	adc	r25, r1
    1402:	99 83       	std	Y+1, r25	; 0x01
    1404:	88 83       	st	Y, r24
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	01 c0       	rjmp	.+2      	; 0x140c <eMBFuncReadCoils+0xa8>
                *usLen += ucNBytes;;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    140a:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    140c:	df 91       	pop	r29
    140e:	cf 91       	pop	r28
    1410:	1f 91       	pop	r17
    1412:	08 95       	ret

00001414 <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
    1414:	df 93       	push	r29
    1416:	cf 93       	push	r28
    1418:	00 d0       	rcall	.+0      	; 0x141a <eMBFuncWriteCoil+0x6>
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	fc 01       	movw	r30, r24
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    1420:	db 01       	movw	r26, r22
    1422:	8d 91       	ld	r24, X+
    1424:	9c 91       	ld	r25, X
    1426:	11 97       	sbiw	r26, 0x01	; 1
    1428:	85 30       	cpi	r24, 0x05	; 5
    142a:	91 05       	cpc	r25, r1
    142c:	21 f5       	brne	.+72     	; 0x1476 <eMBFuncWriteCoil+0x62>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
    142e:	21 81       	ldd	r18, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
    1430:	62 81       	ldd	r22, Z+2	; 0x02
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
    1432:	84 81       	ldd	r24, Z+4	; 0x04
    1434:	88 23       	and	r24, r24
    1436:	f9 f4       	brne	.+62     	; 0x1476 <eMBFuncWriteCoil+0x62>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
    1438:	83 81       	ldd	r24, Z+3	; 0x03
    143a:	98 2f       	mov	r25, r24
    143c:	91 50       	subi	r25, 0x01	; 1
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
        usRegAddress++;

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
    143e:	9e 3f       	cpi	r25, 0xFE	; 254
    1440:	d0 f0       	brcs	.+52     	; 0x1476 <eMBFuncWriteCoil+0x62>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
        {
            ucBuf[1] = 0;
    1442:	1a 82       	std	Y+2, r1	; 0x02
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
    1444:	8f 3f       	cpi	r24, 0xFF	; 255
    1446:	19 f4       	brne	.+6      	; 0x144e <eMBFuncWriteCoil+0x3a>
            {
                ucBuf[0] = 1;
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	89 83       	std	Y+1, r24	; 0x01
    144c:	01 c0       	rjmp	.+2      	; 0x1450 <eMBFuncWriteCoil+0x3c>
            }
            else
            {
                ucBuf[0] = 0;
    144e:	19 82       	std	Y+1, r1	; 0x01
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
    1450:	92 2f       	mov	r25, r18
    1452:	80 e0       	ldi	r24, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
    1454:	70 e0       	ldi	r23, 0x00	; 0
    1456:	68 2b       	or	r22, r24
    1458:	79 2b       	or	r23, r25
        usRegAddress++;
    145a:	6f 5f       	subi	r22, 0xFF	; 255
    145c:	7f 4f       	sbci	r23, 0xFF	; 255
            }
            else
            {
                ucBuf[0] = 0;
            }
            eRegStatus =
    145e:	ce 01       	movw	r24, r28
    1460:	01 96       	adiw	r24, 0x01	; 1
    1462:	41 e0       	ldi	r20, 0x01	; 1
    1464:	50 e0       	ldi	r21, 0x00	; 0
    1466:	21 e0       	ldi	r18, 0x01	; 1
    1468:	0e 94 bd 03 	call	0x77a	; 0x77a <eMBRegCoilsCB>
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    146c:	88 23       	and	r24, r24
    146e:	29 f0       	breq	.+10     	; 0x147a <eMBFuncWriteCoil+0x66>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    1470:	0e 94 a8 09 	call	0x1350	; 0x1350 <prveMBError2Exception>
    1474:	03 c0       	rjmp	.+6      	; 0x147c <eMBFuncWriteCoil+0x68>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    1476:	83 e0       	ldi	r24, 0x03	; 3
    1478:	01 c0       	rjmp	.+2      	; 0x147c <eMBFuncWriteCoil+0x68>
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
    147a:	80 e0       	ldi	r24, 0x00	; 0
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
    1486:	cf 93       	push	r28
    1488:	df 93       	push	r29
    148a:	fc 01       	movw	r30, r24
    148c:	eb 01       	movw	r28, r22
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    148e:	88 81       	ld	r24, Y
    1490:	99 81       	ldd	r25, Y+1	; 0x01
    1492:	86 30       	cpi	r24, 0x06	; 6
    1494:	91 05       	cpc	r25, r1
    1496:	b0 f1       	brcs	.+108    	; 0x1504 <eMBFuncWriteMultipleCoils+0x7e>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
    1498:	71 81       	ldd	r23, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
    149a:	62 81       	ldd	r22, Z+2	; 0x02
        usRegAddress++;

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
    149c:	93 81       	ldd	r25, Z+3	; 0x03
    149e:	80 e0       	ldi	r24, 0x00	; 0
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
    14a0:	44 81       	ldd	r20, Z+4	; 0x04
    14a2:	50 e0       	ldi	r21, 0x00	; 0
    14a4:	48 2b       	or	r20, r24
    14a6:	59 2b       	or	r21, r25

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
    14a8:	a5 81       	ldd	r26, Z+5	; 0x05

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
    14aa:	9a 01       	movw	r18, r20
    14ac:	27 70       	andi	r18, 0x07	; 7
    14ae:	30 70       	andi	r19, 0x00	; 0
    14b0:	ca 01       	movw	r24, r20
    14b2:	b3 e0       	ldi	r27, 0x03	; 3
    14b4:	96 95       	lsr	r25
    14b6:	87 95       	ror	r24
    14b8:	ba 95       	dec	r27
    14ba:	e1 f7       	brne	.-8      	; 0x14b4 <eMBFuncWriteMultipleCoils+0x2e>
    14bc:	21 15       	cp	r18, r1
    14be:	31 05       	cpc	r19, r1
    14c0:	09 f0       	breq	.+2      	; 0x14c4 <eMBFuncWriteMultipleCoils+0x3e>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
    14c2:	8f 5f       	subi	r24, 0xFF	; 255
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
        }

        if( ( usCoilCnt >= 1 ) &&
    14c4:	9a 01       	movw	r18, r20
    14c6:	21 50       	subi	r18, 0x01	; 1
    14c8:	30 40       	sbci	r19, 0x00	; 0
    14ca:	97 e0       	ldi	r25, 0x07	; 7
    14cc:	20 3b       	cpi	r18, 0xB0	; 176
    14ce:	39 07       	cpc	r19, r25
    14d0:	c8 f4       	brcc	.+50     	; 0x1504 <eMBFuncWriteMultipleCoils+0x7e>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
    14d2:	8a 17       	cp	r24, r26
    14d4:	b9 f4       	brne	.+46     	; 0x1504 <eMBFuncWriteMultipleCoils+0x7e>
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
    14d6:	97 2f       	mov	r25, r23
    14d8:	80 e0       	ldi	r24, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
    14da:	70 e0       	ldi	r23, 0x00	; 0
    14dc:	68 2b       	or	r22, r24
    14de:	79 2b       	or	r23, r25
        usRegAddress++;
    14e0:	6f 5f       	subi	r22, 0xFF	; 255
    14e2:	7f 4f       	sbci	r23, 0xFF	; 255

        if( ( usCoilCnt >= 1 ) &&
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
    14e4:	cf 01       	movw	r24, r30
    14e6:	06 96       	adiw	r24, 0x06	; 6
    14e8:	21 e0       	ldi	r18, 0x01	; 1
    14ea:	0e 94 bd 03 	call	0x77a	; 0x77a <eMBRegCoilsCB>
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    14ee:	88 23       	and	r24, r24
    14f0:	19 f0       	breq	.+6      	; 0x14f8 <eMBFuncWriteMultipleCoils+0x72>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    14f2:	0e 94 a8 09 	call	0x1350	; 0x1350 <prveMBError2Exception>
    14f6:	07 c0       	rjmp	.+14     	; 0x1506 <eMBFuncWriteMultipleCoils+0x80>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
    14f8:	85 e0       	ldi	r24, 0x05	; 5
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	99 83       	std	Y+1, r25	; 0x01
    14fe:	88 83       	st	Y, r24
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	01 c0       	rjmp	.+2      	; 0x1506 <eMBFuncWriteMultipleCoils+0x80>
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    1504:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    1506:	df 91       	pop	r29
    1508:	cf 91       	pop	r28
    150a:	08 95       	ret

0000150c <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
    150c:	1f 93       	push	r17
    150e:	cf 93       	push	r28
    1510:	df 93       	push	r29
    1512:	fc 01       	movw	r30, r24
    1514:	eb 01       	movw	r28, r22
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    1516:	88 81       	ld	r24, Y
    1518:	99 81       	ldd	r25, Y+1	; 0x01
    151a:	85 30       	cpi	r24, 0x05	; 5
    151c:	91 05       	cpc	r25, r1
    151e:	09 f0       	breq	.+2      	; 0x1522 <eMBFuncReadDiscreteInputs+0x16>
    1520:	48 c0       	rjmp	.+144    	; 0x15b2 <eMBFuncReadDiscreteInputs+0xa6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    1522:	cf 01       	movw	r24, r30
    1524:	01 96       	adiw	r24, 0x01	; 1
    1526:	71 81       	ldd	r23, Z+1	; 0x01
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    1528:	62 81       	ldd	r22, Z+2	; 0x02
        usRegAddress++;

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
    152a:	33 81       	ldd	r19, Z+3	; 0x03
    152c:	20 e0       	ldi	r18, 0x00	; 0
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
    152e:	44 81       	ldd	r20, Z+4	; 0x04
    1530:	50 e0       	ldi	r21, 0x00	; 0
    1532:	42 2b       	or	r20, r18
    1534:	53 2b       	or	r21, r19

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
    1536:	9a 01       	movw	r18, r20
    1538:	21 50       	subi	r18, 0x01	; 1
    153a:	30 40       	sbci	r19, 0x00	; 0
    153c:	a7 e0       	ldi	r26, 0x07	; 7
    153e:	2f 3c       	cpi	r18, 0xCF	; 207
    1540:	3a 07       	cpc	r19, r26
    1542:	b8 f5       	brcc	.+110    	; 0x15b2 <eMBFuncReadDiscreteInputs+0xa6>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
            *usLen = MB_PDU_FUNC_OFF;
    1544:	19 82       	std	Y+1, r1	; 0x01
    1546:	18 82       	st	Y, r1

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
    1548:	22 e0       	ldi	r18, 0x02	; 2
    154a:	20 83       	st	Z, r18
            *usLen += 1;
    154c:	28 81       	ld	r18, Y
    154e:	39 81       	ldd	r19, Y+1	; 0x01
    1550:	2f 5f       	subi	r18, 0xFF	; 255
    1552:	3f 4f       	sbci	r19, 0xFF	; 255
    1554:	39 83       	std	Y+1, r19	; 0x01
    1556:	28 83       	st	Y, r18

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
    1558:	da 01       	movw	r26, r20
    155a:	a7 70       	andi	r26, 0x07	; 7
    155c:	b0 70       	andi	r27, 0x00	; 0
    155e:	9a 01       	movw	r18, r20
    1560:	13 e0       	ldi	r17, 0x03	; 3
    1562:	36 95       	lsr	r19
    1564:	27 95       	ror	r18
    1566:	1a 95       	dec	r17
    1568:	e1 f7       	brne	.-8      	; 0x1562 <eMBFuncReadDiscreteInputs+0x56>
    156a:	10 97       	sbiw	r26, 0x00	; 0
    156c:	19 f0       	breq	.+6      	; 0x1574 <eMBFuncReadDiscreteInputs+0x68>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
    156e:	12 2f       	mov	r17, r18
    1570:	1f 5f       	subi	r17, 0xFF	; 255
    1572:	01 c0       	rjmp	.+2      	; 0x1576 <eMBFuncReadDiscreteInputs+0x6a>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
    1574:	12 2f       	mov	r17, r18
            }
            *pucFrameCur++ = ucNBytes;
    1576:	11 83       	std	Z+1, r17	; 0x01
            *usLen += 1;
    1578:	28 81       	ld	r18, Y
    157a:	39 81       	ldd	r19, Y+1	; 0x01
    157c:	2f 5f       	subi	r18, 0xFF	; 255
    157e:	3f 4f       	sbci	r19, 0xFF	; 255
    1580:	39 83       	std	Y+1, r19	; 0x01
    1582:	28 83       	st	Y, r18
    eMBException    eStatus = MB_EX_NONE;
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
    1584:	37 2f       	mov	r19, r23
    1586:	20 e0       	ldi	r18, 0x00	; 0
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
    1588:	70 e0       	ldi	r23, 0x00	; 0
    158a:	62 2b       	or	r22, r18
    158c:	73 2b       	or	r23, r19
        usRegAddress++;
    158e:	6f 5f       	subi	r22, 0xFF	; 255
    1590:	7f 4f       	sbci	r23, 0xFF	; 255
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
            }
            *pucFrameCur++ = ucNBytes;
            *usLen += 1;

            eRegStatus =
    1592:	01 96       	adiw	r24, 0x01	; 1
    1594:	0e 94 bf 03 	call	0x77e	; 0x77e <eMBRegDiscreteCB>
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
    1598:	88 23       	and	r24, r24
    159a:	19 f0       	breq	.+6      	; 0x15a2 <eMBFuncReadDiscreteInputs+0x96>
            {
                eStatus = prveMBError2Exception( eRegStatus );
    159c:	0e 94 a8 09 	call	0x1350	; 0x1350 <prveMBError2Exception>
    15a0:	09 c0       	rjmp	.+18     	; 0x15b4 <eMBFuncReadDiscreteInputs+0xa8>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
    15a2:	88 81       	ld	r24, Y
    15a4:	99 81       	ldd	r25, Y+1	; 0x01
    15a6:	81 0f       	add	r24, r17
    15a8:	91 1d       	adc	r25, r1
    15aa:	99 83       	std	Y+1, r25	; 0x01
    15ac:	88 83       	st	Y, r24
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	01 c0       	rjmp	.+2      	; 0x15b4 <eMBFuncReadDiscreteInputs+0xa8>
                *usLen += ucNBytes;;
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    15b2:	83 e0       	ldi	r24, 0x03	; 3
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
    }
    return eStatus;
}
    15b4:	df 91       	pop	r29
    15b6:	cf 91       	pop	r28
    15b8:	1f 91       	pop	r17
    15ba:	08 95       	ret

000015bc <eMBSetSlaveID>:
/* ----------------------- Start implementation -----------------------------*/

eMBErrorCode
eMBSetSlaveID( UCHAR ucSlaveID, BOOL xIsRunning,
               UCHAR const *pucAdditional, USHORT usAdditionalLen )
{
    15bc:	cf 93       	push	r28
    15be:	df 93       	push	r29
    eMBErrorCode    eStatus = MB_ENOERR;

    /* the first byte and second byte in the buffer is reserved for
     * the parameter ucSlaveID and the running flag. The rest of
     * the buffer is available for additional data. */
    if( usAdditionalLen + 2 < MB_FUNC_OTHER_REP_SLAVEID_BUF )
    15c0:	e9 01       	movw	r28, r18
    15c2:	22 96       	adiw	r28, 0x02	; 2
    15c4:	c0 32       	cpi	r28, 0x20	; 32
    15c6:	d1 05       	cpc	r29, r1
    15c8:	f0 f4       	brcc	.+60     	; 0x1606 <eMBSetSlaveID+0x4a>
    {
        usMBSlaveIDLen = 0;
        ucMBSlaveID[usMBSlaveIDLen++] = ucSlaveID;
    15ca:	80 93 35 01 	sts	0x0135, r24
        ucMBSlaveID[usMBSlaveIDLen++] = ( UCHAR )( xIsRunning ? 0xFF : 0x00 );
    15ce:	66 23       	and	r22, r22
    15d0:	11 f0       	breq	.+4      	; 0x15d6 <eMBSetSlaveID+0x1a>
    15d2:	8f ef       	ldi	r24, 0xFF	; 255
    15d4:	01 c0       	rjmp	.+2      	; 0x15d8 <eMBSetSlaveID+0x1c>
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	80 93 36 01 	sts	0x0136, r24
    15dc:	82 e0       	ldi	r24, 0x02	; 2
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	90 93 34 01 	sts	0x0134, r25
    15e4:	80 93 33 01 	sts	0x0133, r24
        if( usAdditionalLen > 0 )
    15e8:	21 15       	cp	r18, r1
    15ea:	31 05       	cpc	r19, r1
    15ec:	71 f0       	breq	.+28     	; 0x160a <eMBSetSlaveID+0x4e>
        {
            memcpy( &ucMBSlaveID[usMBSlaveIDLen], pucAdditional,
    15ee:	e7 e3       	ldi	r30, 0x37	; 55
    15f0:	f1 e0       	ldi	r31, 0x01	; 1
    15f2:	cf 01       	movw	r24, r30
    15f4:	ba 01       	movw	r22, r20
    15f6:	a9 01       	movw	r20, r18
    15f8:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <memcpy>
                    ( size_t )usAdditionalLen );
            usMBSlaveIDLen += usAdditionalLen;
    15fc:	d0 93 34 01 	sts	0x0134, r29
    1600:	c0 93 33 01 	sts	0x0133, r28
    1604:	02 c0       	rjmp	.+4      	; 0x160a <eMBSetSlaveID+0x4e>
        }
    }
    else
    {
        eStatus = MB_ENORES;
    1606:	84 e0       	ldi	r24, 0x04	; 4
    1608:	01 c0       	rjmp	.+2      	; 0x160c <eMBSetSlaveID+0x50>

eMBErrorCode
eMBSetSlaveID( UCHAR ucSlaveID, BOOL xIsRunning,
               UCHAR const *pucAdditional, USHORT usAdditionalLen )
{
    eMBErrorCode    eStatus = MB_ENOERR;
    160a:	80 e0       	ldi	r24, 0x00	; 0
    else
    {
        eStatus = MB_ENORES;
    }
    return eStatus;
}
    160c:	df 91       	pop	r29
    160e:	cf 91       	pop	r28
    1610:	08 95       	ret

00001612 <eMBFuncReportSlaveID>:

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
    1612:	ef 92       	push	r14
    1614:	ff 92       	push	r15
    1616:	0f 93       	push	r16
    1618:	1f 93       	push	r17
    161a:	cf 93       	push	r28
    161c:	df 93       	push	r29
    161e:	8b 01       	movw	r16, r22
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
    1620:	c0 91 33 01 	lds	r28, 0x0133
    1624:	d0 91 34 01 	lds	r29, 0x0134
    1628:	ac 01       	movw	r20, r24
    162a:	4f 5f       	subi	r20, 0xFF	; 255
    162c:	5f 4f       	sbci	r21, 0xFF	; 255
    162e:	25 e3       	ldi	r18, 0x35	; 53
    1630:	31 e0       	ldi	r19, 0x01	; 1
    1632:	ca 01       	movw	r24, r20
    1634:	b9 01       	movw	r22, r18
    1636:	ae 01       	movw	r20, r28
    1638:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
    163c:	21 96       	adiw	r28, 0x01	; 1
    163e:	f8 01       	movw	r30, r16
    1640:	d1 83       	std	Z+1, r29	; 0x01
    1642:	c0 83       	st	Z, r28
    return MB_EX_NONE;
}
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	df 91       	pop	r29
    1648:	cf 91       	pop	r28
    164a:	1f 91       	pop	r17
    164c:	0f 91       	pop	r16
    164e:	ff 90       	pop	r15
    1650:	ef 90       	pop	r14
    1652:	08 95       	ret

00001654 <__mulsi3>:
    1654:	62 9f       	mul	r22, r18
    1656:	d0 01       	movw	r26, r0
    1658:	73 9f       	mul	r23, r19
    165a:	f0 01       	movw	r30, r0
    165c:	82 9f       	mul	r24, r18
    165e:	e0 0d       	add	r30, r0
    1660:	f1 1d       	adc	r31, r1
    1662:	64 9f       	mul	r22, r20
    1664:	e0 0d       	add	r30, r0
    1666:	f1 1d       	adc	r31, r1
    1668:	92 9f       	mul	r25, r18
    166a:	f0 0d       	add	r31, r0
    166c:	83 9f       	mul	r24, r19
    166e:	f0 0d       	add	r31, r0
    1670:	74 9f       	mul	r23, r20
    1672:	f0 0d       	add	r31, r0
    1674:	65 9f       	mul	r22, r21
    1676:	f0 0d       	add	r31, r0
    1678:	99 27       	eor	r25, r25
    167a:	72 9f       	mul	r23, r18
    167c:	b0 0d       	add	r27, r0
    167e:	e1 1d       	adc	r30, r1
    1680:	f9 1f       	adc	r31, r25
    1682:	63 9f       	mul	r22, r19
    1684:	b0 0d       	add	r27, r0
    1686:	e1 1d       	adc	r30, r1
    1688:	f9 1f       	adc	r31, r25
    168a:	bd 01       	movw	r22, r26
    168c:	cf 01       	movw	r24, r30
    168e:	11 24       	eor	r1, r1
    1690:	08 95       	ret

00001692 <__udivmodsi4>:
    1692:	a1 e2       	ldi	r26, 0x21	; 33
    1694:	1a 2e       	mov	r1, r26
    1696:	aa 1b       	sub	r26, r26
    1698:	bb 1b       	sub	r27, r27
    169a:	fd 01       	movw	r30, r26
    169c:	0d c0       	rjmp	.+26     	; 0x16b8 <__udivmodsi4_ep>

0000169e <__udivmodsi4_loop>:
    169e:	aa 1f       	adc	r26, r26
    16a0:	bb 1f       	adc	r27, r27
    16a2:	ee 1f       	adc	r30, r30
    16a4:	ff 1f       	adc	r31, r31
    16a6:	a2 17       	cp	r26, r18
    16a8:	b3 07       	cpc	r27, r19
    16aa:	e4 07       	cpc	r30, r20
    16ac:	f5 07       	cpc	r31, r21
    16ae:	20 f0       	brcs	.+8      	; 0x16b8 <__udivmodsi4_ep>
    16b0:	a2 1b       	sub	r26, r18
    16b2:	b3 0b       	sbc	r27, r19
    16b4:	e4 0b       	sbc	r30, r20
    16b6:	f5 0b       	sbc	r31, r21

000016b8 <__udivmodsi4_ep>:
    16b8:	66 1f       	adc	r22, r22
    16ba:	77 1f       	adc	r23, r23
    16bc:	88 1f       	adc	r24, r24
    16be:	99 1f       	adc	r25, r25
    16c0:	1a 94       	dec	r1
    16c2:	69 f7       	brne	.-38     	; 0x169e <__udivmodsi4_loop>
    16c4:	60 95       	com	r22
    16c6:	70 95       	com	r23
    16c8:	80 95       	com	r24
    16ca:	90 95       	com	r25
    16cc:	9b 01       	movw	r18, r22
    16ce:	ac 01       	movw	r20, r24
    16d0:	bd 01       	movw	r22, r26
    16d2:	cf 01       	movw	r24, r30
    16d4:	08 95       	ret

000016d6 <memcpy>:
    16d6:	fb 01       	movw	r30, r22
    16d8:	dc 01       	movw	r26, r24
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <memcpy+0xa>
    16dc:	01 90       	ld	r0, Z+
    16de:	0d 92       	st	X+, r0
    16e0:	41 50       	subi	r20, 0x01	; 1
    16e2:	50 40       	sbci	r21, 0x00	; 0
    16e4:	d8 f7       	brcc	.-10     	; 0x16dc <memcpy+0x6>
    16e6:	08 95       	ret

000016e8 <_exit>:
    16e8:	f8 94       	cli

000016ea <__stop_program>:
    16ea:	ff cf       	rjmp	.-2      	; 0x16ea <__stop_program>
